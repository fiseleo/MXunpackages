// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct MiniGameDefenseFixedStatExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MiniGameDefenseFixedStatExcel GetRootAsMiniGameDefenseFixedStatExcel(ByteBuffer _bb) { return GetRootAsMiniGameDefenseFixedStatExcel(_bb, new MiniGameDefenseFixedStatExcel()); }
  public static MiniGameDefenseFixedStatExcel GetRootAsMiniGameDefenseFixedStatExcel(ByteBuffer _bb, MiniGameDefenseFixedStatExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MiniGameDefenseFixedStatExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long MinigameDefenseFixedStatId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Grade { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExSkillLevel { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NoneExSkillLevel { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Equipment1Tier { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Equipment1Level { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Equipment2Tier { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Equipment2Level { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Equipment3Tier { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Equipment3Level { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterWeaponGrade { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterWeaponLevel { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterGearTier { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterGearLevel { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Plana.FlatData.MiniGameDefenseFixedStatExcel> CreateMiniGameDefenseFixedStatExcel(FlatBufferBuilder builder,
      long MinigameDefenseFixedStatId = 0,
      int Level = 0,
      int Grade = 0,
      int ExSkillLevel = 0,
      int NoneExSkillLevel = 0,
      int Equipment1Tier = 0,
      int Equipment1Level = 0,
      int Equipment2Tier = 0,
      int Equipment2Level = 0,
      int Equipment3Tier = 0,
      int Equipment3Level = 0,
      int CharacterWeaponGrade = 0,
      int CharacterWeaponLevel = 0,
      int CharacterGearTier = 0,
      int CharacterGearLevel = 0) {
    builder.StartTable(15);
    MiniGameDefenseFixedStatExcel.AddMinigameDefenseFixedStatId(builder, MinigameDefenseFixedStatId);
    MiniGameDefenseFixedStatExcel.AddCharacterGearLevel(builder, CharacterGearLevel);
    MiniGameDefenseFixedStatExcel.AddCharacterGearTier(builder, CharacterGearTier);
    MiniGameDefenseFixedStatExcel.AddCharacterWeaponLevel(builder, CharacterWeaponLevel);
    MiniGameDefenseFixedStatExcel.AddCharacterWeaponGrade(builder, CharacterWeaponGrade);
    MiniGameDefenseFixedStatExcel.AddEquipment3Level(builder, Equipment3Level);
    MiniGameDefenseFixedStatExcel.AddEquipment3Tier(builder, Equipment3Tier);
    MiniGameDefenseFixedStatExcel.AddEquipment2Level(builder, Equipment2Level);
    MiniGameDefenseFixedStatExcel.AddEquipment2Tier(builder, Equipment2Tier);
    MiniGameDefenseFixedStatExcel.AddEquipment1Level(builder, Equipment1Level);
    MiniGameDefenseFixedStatExcel.AddEquipment1Tier(builder, Equipment1Tier);
    MiniGameDefenseFixedStatExcel.AddNoneExSkillLevel(builder, NoneExSkillLevel);
    MiniGameDefenseFixedStatExcel.AddExSkillLevel(builder, ExSkillLevel);
    MiniGameDefenseFixedStatExcel.AddGrade(builder, Grade);
    MiniGameDefenseFixedStatExcel.AddLevel(builder, Level);
    return MiniGameDefenseFixedStatExcel.EndMiniGameDefenseFixedStatExcel(builder);
  }

  public static void StartMiniGameDefenseFixedStatExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddMinigameDefenseFixedStatId(FlatBufferBuilder builder, long minigameDefenseFixedStatId) { builder.AddLong(0, minigameDefenseFixedStatId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(1, level, 0); }
  public static void AddGrade(FlatBufferBuilder builder, int grade) { builder.AddInt(2, grade, 0); }
  public static void AddExSkillLevel(FlatBufferBuilder builder, int exSkillLevel) { builder.AddInt(3, exSkillLevel, 0); }
  public static void AddNoneExSkillLevel(FlatBufferBuilder builder, int noneExSkillLevel) { builder.AddInt(4, noneExSkillLevel, 0); }
  public static void AddEquipment1Tier(FlatBufferBuilder builder, int equipment1Tier) { builder.AddInt(5, equipment1Tier, 0); }
  public static void AddEquipment1Level(FlatBufferBuilder builder, int equipment1Level) { builder.AddInt(6, equipment1Level, 0); }
  public static void AddEquipment2Tier(FlatBufferBuilder builder, int equipment2Tier) { builder.AddInt(7, equipment2Tier, 0); }
  public static void AddEquipment2Level(FlatBufferBuilder builder, int equipment2Level) { builder.AddInt(8, equipment2Level, 0); }
  public static void AddEquipment3Tier(FlatBufferBuilder builder, int equipment3Tier) { builder.AddInt(9, equipment3Tier, 0); }
  public static void AddEquipment3Level(FlatBufferBuilder builder, int equipment3Level) { builder.AddInt(10, equipment3Level, 0); }
  public static void AddCharacterWeaponGrade(FlatBufferBuilder builder, int characterWeaponGrade) { builder.AddInt(11, characterWeaponGrade, 0); }
  public static void AddCharacterWeaponLevel(FlatBufferBuilder builder, int characterWeaponLevel) { builder.AddInt(12, characterWeaponLevel, 0); }
  public static void AddCharacterGearTier(FlatBufferBuilder builder, int characterGearTier) { builder.AddInt(13, characterGearTier, 0); }
  public static void AddCharacterGearLevel(FlatBufferBuilder builder, int characterGearLevel) { builder.AddInt(14, characterGearLevel, 0); }
  public static Offset<Plana.FlatData.MiniGameDefenseFixedStatExcel> EndMiniGameDefenseFixedStatExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.MiniGameDefenseFixedStatExcel>(o);
  }
  public MiniGameDefenseFixedStatExcelT UnPack() {
    var _o = new MiniGameDefenseFixedStatExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MiniGameDefenseFixedStatExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("MiniGameDefenseFixedStat");
    _o.MinigameDefenseFixedStatId = TableEncryptionService.Convert(this.MinigameDefenseFixedStatId, key);
    _o.Level = TableEncryptionService.Convert(this.Level, key);
    _o.Grade = TableEncryptionService.Convert(this.Grade, key);
    _o.ExSkillLevel = TableEncryptionService.Convert(this.ExSkillLevel, key);
    _o.NoneExSkillLevel = TableEncryptionService.Convert(this.NoneExSkillLevel, key);
    _o.Equipment1Tier = TableEncryptionService.Convert(this.Equipment1Tier, key);
    _o.Equipment1Level = TableEncryptionService.Convert(this.Equipment1Level, key);
    _o.Equipment2Tier = TableEncryptionService.Convert(this.Equipment2Tier, key);
    _o.Equipment2Level = TableEncryptionService.Convert(this.Equipment2Level, key);
    _o.Equipment3Tier = TableEncryptionService.Convert(this.Equipment3Tier, key);
    _o.Equipment3Level = TableEncryptionService.Convert(this.Equipment3Level, key);
    _o.CharacterWeaponGrade = TableEncryptionService.Convert(this.CharacterWeaponGrade, key);
    _o.CharacterWeaponLevel = TableEncryptionService.Convert(this.CharacterWeaponLevel, key);
    _o.CharacterGearTier = TableEncryptionService.Convert(this.CharacterGearTier, key);
    _o.CharacterGearLevel = TableEncryptionService.Convert(this.CharacterGearLevel, key);
  }
  public static Offset<Plana.FlatData.MiniGameDefenseFixedStatExcel> Pack(FlatBufferBuilder builder, MiniGameDefenseFixedStatExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.MiniGameDefenseFixedStatExcel>);
    return CreateMiniGameDefenseFixedStatExcel(
      builder,
      _o.MinigameDefenseFixedStatId,
      _o.Level,
      _o.Grade,
      _o.ExSkillLevel,
      _o.NoneExSkillLevel,
      _o.Equipment1Tier,
      _o.Equipment1Level,
      _o.Equipment2Tier,
      _o.Equipment2Level,
      _o.Equipment3Tier,
      _o.Equipment3Level,
      _o.CharacterWeaponGrade,
      _o.CharacterWeaponLevel,
      _o.CharacterGearTier,
      _o.CharacterGearLevel);
  }
}

public class MiniGameDefenseFixedStatExcelT
{
  public long MinigameDefenseFixedStatId { get; set; }
  public int Level { get; set; }
  public int Grade { get; set; }
  public int ExSkillLevel { get; set; }
  public int NoneExSkillLevel { get; set; }
  public int Equipment1Tier { get; set; }
  public int Equipment1Level { get; set; }
  public int Equipment2Tier { get; set; }
  public int Equipment2Level { get; set; }
  public int Equipment3Tier { get; set; }
  public int Equipment3Level { get; set; }
  public int CharacterWeaponGrade { get; set; }
  public int CharacterWeaponLevel { get; set; }
  public int CharacterGearTier { get; set; }
  public int CharacterGearLevel { get; set; }

  public MiniGameDefenseFixedStatExcelT() {
    this.MinigameDefenseFixedStatId = 0;
    this.Level = 0;
    this.Grade = 0;
    this.ExSkillLevel = 0;
    this.NoneExSkillLevel = 0;
    this.Equipment1Tier = 0;
    this.Equipment1Level = 0;
    this.Equipment2Tier = 0;
    this.Equipment2Level = 0;
    this.Equipment3Tier = 0;
    this.Equipment3Level = 0;
    this.CharacterWeaponGrade = 0;
    this.CharacterWeaponLevel = 0;
    this.CharacterGearTier = 0;
    this.CharacterGearLevel = 0;
  }
}


static public class MiniGameDefenseFixedStatExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*MinigameDefenseFixedStatId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Grade*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ExSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*NoneExSkillLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*Equipment1Tier*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Equipment1Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Equipment2Tier*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Equipment2Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 22 /*Equipment3Tier*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*Equipment3Level*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*CharacterWeaponGrade*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*CharacterWeaponLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*CharacterGearTier*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*CharacterGearLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
