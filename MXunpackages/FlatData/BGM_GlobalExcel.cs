// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct BGM_GlobalExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static BGM_GlobalExcel GetRootAsBGM_GlobalExcel(ByteBuffer _bb) { return GetRootAsBGM_GlobalExcel(_bb, new BGM_GlobalExcel()); }
  public static BGM_GlobalExcel GetRootAsBGM_GlobalExcel(ByteBuffer _bb, BGM_GlobalExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BGM_GlobalExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupBGMId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BGMIdKr { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BGMIdJp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BGMIdTh { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BGMIdTw { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BGMIdEn { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Plana.FlatData.BGM_GlobalExcel> CreateBGM_GlobalExcel(FlatBufferBuilder builder,
      long GroupBGMId = 0,
      long BGMIdKr = 0,
      long BGMIdJp = 0,
      long BGMIdTh = 0,
      long BGMIdTw = 0,
      long BGMIdEn = 0) {
    builder.StartTable(6);
    BGM_GlobalExcel.AddBGMIdEn(builder, BGMIdEn);
    BGM_GlobalExcel.AddBGMIdTw(builder, BGMIdTw);
    BGM_GlobalExcel.AddBGMIdTh(builder, BGMIdTh);
    BGM_GlobalExcel.AddBGMIdJp(builder, BGMIdJp);
    BGM_GlobalExcel.AddBGMIdKr(builder, BGMIdKr);
    BGM_GlobalExcel.AddGroupBGMId(builder, GroupBGMId);
    return BGM_GlobalExcel.EndBGM_GlobalExcel(builder);
  }

  public static void StartBGM_GlobalExcel(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddGroupBGMId(FlatBufferBuilder builder, long groupBGMId) { builder.AddLong(0, groupBGMId, 0); }
  public static void AddBGMIdKr(FlatBufferBuilder builder, long bGMIdKr) { builder.AddLong(1, bGMIdKr, 0); }
  public static void AddBGMIdJp(FlatBufferBuilder builder, long bGMIdJp) { builder.AddLong(2, bGMIdJp, 0); }
  public static void AddBGMIdTh(FlatBufferBuilder builder, long bGMIdTh) { builder.AddLong(3, bGMIdTh, 0); }
  public static void AddBGMIdTw(FlatBufferBuilder builder, long bGMIdTw) { builder.AddLong(4, bGMIdTw, 0); }
  public static void AddBGMIdEn(FlatBufferBuilder builder, long bGMIdEn) { builder.AddLong(5, bGMIdEn, 0); }
  public static Offset<Plana.FlatData.BGM_GlobalExcel> EndBGM_GlobalExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.BGM_GlobalExcel>(o);
  }
  public BGM_GlobalExcelT UnPack() {
    var _o = new BGM_GlobalExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BGM_GlobalExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("BGM_Global");
    _o.GroupBGMId = TableEncryptionService.Convert(this.GroupBGMId, key);
    _o.BGMIdKr = TableEncryptionService.Convert(this.BGMIdKr, key);
    _o.BGMIdJp = TableEncryptionService.Convert(this.BGMIdJp, key);
    _o.BGMIdTh = TableEncryptionService.Convert(this.BGMIdTh, key);
    _o.BGMIdTw = TableEncryptionService.Convert(this.BGMIdTw, key);
    _o.BGMIdEn = TableEncryptionService.Convert(this.BGMIdEn, key);
  }
  public static Offset<Plana.FlatData.BGM_GlobalExcel> Pack(FlatBufferBuilder builder, BGM_GlobalExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.BGM_GlobalExcel>);
    return CreateBGM_GlobalExcel(
      builder,
      _o.GroupBGMId,
      _o.BGMIdKr,
      _o.BGMIdJp,
      _o.BGMIdTh,
      _o.BGMIdTw,
      _o.BGMIdEn);
  }
}

public class BGM_GlobalExcelT
{
  public long GroupBGMId { get; set; }
  public long BGMIdKr { get; set; }
  public long BGMIdJp { get; set; }
  public long BGMIdTh { get; set; }
  public long BGMIdTw { get; set; }
  public long BGMIdEn { get; set; }

  public BGM_GlobalExcelT() {
    this.GroupBGMId = 0;
    this.BGMIdKr = 0;
    this.BGMIdJp = 0;
    this.BGMIdTh = 0;
    this.BGMIdTw = 0;
    this.BGMIdEn = 0;
  }
}


static public class BGM_GlobalExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupBGMId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*BGMIdKr*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*BGMIdJp*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*BGMIdTh*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*BGMIdTw*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*BGMIdEn*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
