// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct CharacterPotentialExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CharacterPotentialExcel GetRootAsCharacterPotentialExcel(ByteBuffer _bb) { return GetRootAsCharacterPotentialExcel(_bb, new CharacterPotentialExcel()); }
  public static CharacterPotentialExcel GetRootAsCharacterPotentialExcel(ByteBuffer _bb, CharacterPotentialExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterPotentialExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PotentialStatGroupId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Plana.FlatData.PotentialStatBonusRateType PotentialStatBonusRateType_ { get { int o = __p.__offset(8); return o != 0 ? (Plana.FlatData.PotentialStatBonusRateType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.PotentialStatBonusRateType.None; } }
  public bool IsUnnecessaryStat { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Plana.FlatData.CharacterPotentialExcel> CreateCharacterPotentialExcel(FlatBufferBuilder builder,
      long Id = 0,
      long PotentialStatGroupId = 0,
      Plana.FlatData.PotentialStatBonusRateType PotentialStatBonusRateType_ = Plana.FlatData.PotentialStatBonusRateType.None,
      bool IsUnnecessaryStat = false) {
    builder.StartTable(4);
    CharacterPotentialExcel.AddPotentialStatGroupId(builder, PotentialStatGroupId);
    CharacterPotentialExcel.AddId(builder, Id);
    CharacterPotentialExcel.AddPotentialStatBonusRateType_(builder, PotentialStatBonusRateType_);
    CharacterPotentialExcel.AddIsUnnecessaryStat(builder, IsUnnecessaryStat);
    return CharacterPotentialExcel.EndCharacterPotentialExcel(builder);
  }

  public static void StartCharacterPotentialExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddPotentialStatGroupId(FlatBufferBuilder builder, long potentialStatGroupId) { builder.AddLong(1, potentialStatGroupId, 0); }
  public static void AddPotentialStatBonusRateType_(FlatBufferBuilder builder, Plana.FlatData.PotentialStatBonusRateType potentialStatBonusRateType_) { builder.AddInt(2, (int)potentialStatBonusRateType_, 0); }
  public static void AddIsUnnecessaryStat(FlatBufferBuilder builder, bool isUnnecessaryStat) { builder.AddBool(3, isUnnecessaryStat, false); }
  public static Offset<Plana.FlatData.CharacterPotentialExcel> EndCharacterPotentialExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.CharacterPotentialExcel>(o);
  }
  public CharacterPotentialExcelT UnPack() {
    var _o = new CharacterPotentialExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterPotentialExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("CharacterPotential");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.PotentialStatGroupId = TableEncryptionService.Convert(this.PotentialStatGroupId, key);
    _o.PotentialStatBonusRateType_ = TableEncryptionService.Convert(this.PotentialStatBonusRateType_, key);
    _o.IsUnnecessaryStat = TableEncryptionService.Convert(this.IsUnnecessaryStat, key);
  }
  public static Offset<Plana.FlatData.CharacterPotentialExcel> Pack(FlatBufferBuilder builder, CharacterPotentialExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.CharacterPotentialExcel>);
    return CreateCharacterPotentialExcel(
      builder,
      _o.Id,
      _o.PotentialStatGroupId,
      _o.PotentialStatBonusRateType_,
      _o.IsUnnecessaryStat);
  }
}

public class CharacterPotentialExcelT
{
  public long Id { get; set; }
  public long PotentialStatGroupId { get; set; }
  public Plana.FlatData.PotentialStatBonusRateType PotentialStatBonusRateType_ { get; set; }
  public bool IsUnnecessaryStat { get; set; }

  public CharacterPotentialExcelT() {
    this.Id = 0;
    this.PotentialStatGroupId = 0;
    this.PotentialStatBonusRateType_ = Plana.FlatData.PotentialStatBonusRateType.None;
    this.IsUnnecessaryStat = false;
  }
}


static public class CharacterPotentialExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*PotentialStatGroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*PotentialStatBonusRateType_*/, 4 /*Plana.FlatData.PotentialStatBonusRateType*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*IsUnnecessaryStat*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
