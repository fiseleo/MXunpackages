// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct ScenarioExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ScenarioExcel GetRootAsScenarioExcel(ByteBuffer _bb) { return GetRootAsScenarioExcel(_bb, new ScenarioExcel()); }
  public static ScenarioExcel GetRootAsScenarioExcel(ByteBuffer _bb, ScenarioExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Plana.FlatData.ScenarioBGType None(int j) { int o = __p.__offset(4); return o != 0 ? (Plana.FlatData.ScenarioBGType)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Plana.FlatData.ScenarioBGType)0; }
  public int NoneLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Plana.FlatData.ScenarioBGType> GetNoneBytes() { return __p.__vector_as_span<Plana.FlatData.ScenarioBGType>(4, 4); }
#else
  public ArraySegment<byte>? GetNoneBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public Plana.FlatData.ScenarioBGType[] GetNoneArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Plana.FlatData.ScenarioBGType[] a = new Plana.FlatData.ScenarioBGType[l]; for (int i = 0; i < l; i++) { a[i] = (Plana.FlatData.ScenarioBGType)__p.bb.GetInt(p + i * 4); } return a; }
  public Plana.FlatData.ScenarioCharacterAction Idle(int j) { int o = __p.__offset(6); return o != 0 ? (Plana.FlatData.ScenarioCharacterAction)__p.bb.GetInt(__p.__vector(o) + j * 4) : (Plana.FlatData.ScenarioCharacterAction)0; }
  public int IdleLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<Plana.FlatData.ScenarioCharacterAction> GetIdleBytes() { return __p.__vector_as_span<Plana.FlatData.ScenarioCharacterAction>(6, 4); }
#else
  public ArraySegment<byte>? GetIdleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public Plana.FlatData.ScenarioCharacterAction[] GetIdleArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); Plana.FlatData.ScenarioCharacterAction[] a = new Plana.FlatData.ScenarioCharacterAction[l]; for (int i = 0; i < l; i++) { a[i] = (Plana.FlatData.ScenarioCharacterAction)__p.bb.GetInt(p + i * 4); } return a; }
  public Plana.FlatData.DialogCategory Cafe { get { int o = __p.__offset(8); return o != 0 ? (Plana.FlatData.DialogCategory)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.DialogCategory.Cafe; } }
  public Plana.FlatData.DialogType Talk { get { int o = __p.__offset(10); return o != 0 ? (Plana.FlatData.DialogType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.DialogType.Talk; } }
  public Plana.FlatData.StoryCondition Open { get { int o = __p.__offset(12); return o != 0 ? (Plana.FlatData.StoryCondition)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.StoryCondition.Open; } }
  public Plana.FlatData.EmojiEvent EnterConver { get { int o = __p.__offset(14); return o != 0 ? (Plana.FlatData.EmojiEvent)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.EmojiEvent.EnterConver; } }
  public Plana.FlatData.ScenarioZoomAnchors Center { get { int o = __p.__offset(16); return o != 0 ? (Plana.FlatData.ScenarioZoomAnchors)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.ScenarioZoomAnchors.Center; } }
  public Plana.FlatData.ScenarioZoomType Instant { get { int o = __p.__offset(18); return o != 0 ? (Plana.FlatData.ScenarioZoomType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.ScenarioZoomType.Instant; } }
  public Plana.FlatData.ScenarioContentType Prologue { get { int o = __p.__offset(20); return o != 0 ? (Plana.FlatData.ScenarioContentType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.ScenarioContentType.Prologue; } }

  public static Offset<Plana.FlatData.ScenarioExcel> CreateScenarioExcel(FlatBufferBuilder builder,
      VectorOffset NoneOffset = default(VectorOffset),
      VectorOffset IdleOffset = default(VectorOffset),
      Plana.FlatData.DialogCategory Cafe = Plana.FlatData.DialogCategory.Cafe,
      Plana.FlatData.DialogType Talk = Plana.FlatData.DialogType.Talk,
      Plana.FlatData.StoryCondition Open = Plana.FlatData.StoryCondition.Open,
      Plana.FlatData.EmojiEvent EnterConver = Plana.FlatData.EmojiEvent.EnterConver,
      Plana.FlatData.ScenarioZoomAnchors Center = Plana.FlatData.ScenarioZoomAnchors.Center,
      Plana.FlatData.ScenarioZoomType Instant = Plana.FlatData.ScenarioZoomType.Instant,
      Plana.FlatData.ScenarioContentType Prologue = Plana.FlatData.ScenarioContentType.Prologue) {
    builder.StartTable(9);
    ScenarioExcel.AddPrologue(builder, Prologue);
    ScenarioExcel.AddInstant(builder, Instant);
    ScenarioExcel.AddCenter(builder, Center);
    ScenarioExcel.AddEnterConver(builder, EnterConver);
    ScenarioExcel.AddOpen(builder, Open);
    ScenarioExcel.AddTalk(builder, Talk);
    ScenarioExcel.AddCafe(builder, Cafe);
    ScenarioExcel.AddIdle(builder, IdleOffset);
    ScenarioExcel.AddNone(builder, NoneOffset);
    return ScenarioExcel.EndScenarioExcel(builder);
  }

  public static void StartScenarioExcel(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddNone(FlatBufferBuilder builder, VectorOffset noneOffset) { builder.AddOffset(0, noneOffset.Value, 0); }
  public static VectorOffset CreateNoneVector(FlatBufferBuilder builder, Plana.FlatData.ScenarioBGType[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, Plana.FlatData.ScenarioBGType[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, ArraySegment<Plana.FlatData.ScenarioBGType> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNoneVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Plana.FlatData.ScenarioBGType>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNoneVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIdle(FlatBufferBuilder builder, VectorOffset idleOffset) { builder.AddOffset(1, idleOffset.Value, 0); }
  public static VectorOffset CreateIdleVector(FlatBufferBuilder builder, Plana.FlatData.ScenarioCharacterAction[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, Plana.FlatData.ScenarioCharacterAction[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, ArraySegment<Plana.FlatData.ScenarioCharacterAction> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateIdleVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Plana.FlatData.ScenarioCharacterAction>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartIdleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCafe(FlatBufferBuilder builder, Plana.FlatData.DialogCategory cafe) { builder.AddInt(2, (int)cafe, 0); }
  public static void AddTalk(FlatBufferBuilder builder, Plana.FlatData.DialogType talk) { builder.AddInt(3, (int)talk, 0); }
  public static void AddOpen(FlatBufferBuilder builder, Plana.FlatData.StoryCondition open) { builder.AddInt(4, (int)open, 0); }
  public static void AddEnterConver(FlatBufferBuilder builder, Plana.FlatData.EmojiEvent enterConver) { builder.AddInt(5, (int)enterConver, 0); }
  public static void AddCenter(FlatBufferBuilder builder, Plana.FlatData.ScenarioZoomAnchors center) { builder.AddInt(6, (int)center, 0); }
  public static void AddInstant(FlatBufferBuilder builder, Plana.FlatData.ScenarioZoomType instant) { builder.AddInt(7, (int)instant, 0); }
  public static void AddPrologue(FlatBufferBuilder builder, Plana.FlatData.ScenarioContentType prologue) { builder.AddInt(8, (int)prologue, 0); }
  public static Offset<Plana.FlatData.ScenarioExcel> EndScenarioExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.ScenarioExcel>(o);
  }
  public ScenarioExcelT UnPack() {
    var _o = new ScenarioExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("Scenario");
    _o.None = new List<Plana.FlatData.ScenarioBGType>();
    for (var _j = 0; _j < this.NoneLength; ++_j) {_o.None.Add(TableEncryptionService.Convert(this.None(_j), key));}
    _o.Idle = new List<Plana.FlatData.ScenarioCharacterAction>();
    for (var _j = 0; _j < this.IdleLength; ++_j) {_o.Idle.Add(TableEncryptionService.Convert(this.Idle(_j), key));}
    _o.Cafe = TableEncryptionService.Convert(this.Cafe, key);
    _o.Talk = TableEncryptionService.Convert(this.Talk, key);
    _o.Open = TableEncryptionService.Convert(this.Open, key);
    _o.EnterConver = TableEncryptionService.Convert(this.EnterConver, key);
    _o.Center = TableEncryptionService.Convert(this.Center, key);
    _o.Instant = TableEncryptionService.Convert(this.Instant, key);
    _o.Prologue = TableEncryptionService.Convert(this.Prologue, key);
  }
  public static Offset<Plana.FlatData.ScenarioExcel> Pack(FlatBufferBuilder builder, ScenarioExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.ScenarioExcel>);
    var _None = default(VectorOffset);
    if (_o.None != null) {
      var __None = _o.None.ToArray();
      _None = CreateNoneVector(builder, __None);
    }
    var _Idle = default(VectorOffset);
    if (_o.Idle != null) {
      var __Idle = _o.Idle.ToArray();
      _Idle = CreateIdleVector(builder, __Idle);
    }
    return CreateScenarioExcel(
      builder,
      _None,
      _Idle,
      _o.Cafe,
      _o.Talk,
      _o.Open,
      _o.EnterConver,
      _o.Center,
      _o.Instant,
      _o.Prologue);
  }
}

public class ScenarioExcelT
{
  public List<Plana.FlatData.ScenarioBGType> None { get; set; }
  public List<Plana.FlatData.ScenarioCharacterAction> Idle { get; set; }
  public Plana.FlatData.DialogCategory Cafe { get; set; }
  public Plana.FlatData.DialogType Talk { get; set; }
  public Plana.FlatData.StoryCondition Open { get; set; }
  public Plana.FlatData.EmojiEvent EnterConver { get; set; }
  public Plana.FlatData.ScenarioZoomAnchors Center { get; set; }
  public Plana.FlatData.ScenarioZoomType Instant { get; set; }
  public Plana.FlatData.ScenarioContentType Prologue { get; set; }

  public ScenarioExcelT() {
    this.None = null;
    this.Idle = null;
    this.Cafe = Plana.FlatData.DialogCategory.Cafe;
    this.Talk = Plana.FlatData.DialogType.Talk;
    this.Open = Plana.FlatData.StoryCondition.Open;
    this.EnterConver = Plana.FlatData.EmojiEvent.EnterConver;
    this.Center = Plana.FlatData.ScenarioZoomAnchors.Center;
    this.Instant = Plana.FlatData.ScenarioZoomType.Instant;
    this.Prologue = Plana.FlatData.ScenarioContentType.Prologue;
  }
}


static public class ScenarioExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*None*/, 4 /*Plana.FlatData.ScenarioBGType*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Idle*/, 4 /*Plana.FlatData.ScenarioCharacterAction*/, false)
      && verifier.VerifyField(tablePos, 8 /*Cafe*/, 4 /*Plana.FlatData.DialogCategory*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Talk*/, 4 /*Plana.FlatData.DialogType*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Open*/, 4 /*Plana.FlatData.StoryCondition*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*EnterConver*/, 4 /*Plana.FlatData.EmojiEvent*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*Center*/, 4 /*Plana.FlatData.ScenarioZoomAnchors*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*Instant*/, 4 /*Plana.FlatData.ScenarioZoomType*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*Prologue*/, 4 /*Plana.FlatData.ScenarioContentType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
