// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct CharacterStatsTransExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CharacterStatsTransExcel GetRootAsCharacterStatsTransExcel(ByteBuffer _bb) { return GetRootAsCharacterStatsTransExcel(_bb, new CharacterStatsTransExcel()); }
  public static CharacterStatsTransExcel GetRootAsCharacterStatsTransExcel(ByteBuffer _bb, CharacterStatsTransExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterStatsTransExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Plana.FlatData.StatType TransSupportStats { get { int o = __p.__offset(4); return o != 0 ? (Plana.FlatData.StatType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.StatType.None; } }
  public Plana.FlatData.EchelonExtensionType EchelonExtensionType_ { get { int o = __p.__offset(6); return o != 0 ? (Plana.FlatData.EchelonExtensionType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.EchelonExtensionType.Base; } }
  public int TransSupportStatsFactor { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public Plana.FlatData.StatTransType StatTransType_ { get { int o = __p.__offset(10); return o != 0 ? (Plana.FlatData.StatTransType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.StatTransType.SpecialTransStat; } }

  public static Offset<Plana.FlatData.CharacterStatsTransExcel> CreateCharacterStatsTransExcel(FlatBufferBuilder builder,
      Plana.FlatData.StatType TransSupportStats = Plana.FlatData.StatType.None,
      Plana.FlatData.EchelonExtensionType EchelonExtensionType_ = Plana.FlatData.EchelonExtensionType.Base,
      int TransSupportStatsFactor = 0,
      Plana.FlatData.StatTransType StatTransType_ = Plana.FlatData.StatTransType.SpecialTransStat) {
    builder.StartTable(4);
    CharacterStatsTransExcel.AddStatTransType_(builder, StatTransType_);
    CharacterStatsTransExcel.AddTransSupportStatsFactor(builder, TransSupportStatsFactor);
    CharacterStatsTransExcel.AddEchelonExtensionType_(builder, EchelonExtensionType_);
    CharacterStatsTransExcel.AddTransSupportStats(builder, TransSupportStats);
    return CharacterStatsTransExcel.EndCharacterStatsTransExcel(builder);
  }

  public static void StartCharacterStatsTransExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTransSupportStats(FlatBufferBuilder builder, Plana.FlatData.StatType transSupportStats) { builder.AddInt(0, (int)transSupportStats, 0); }
  public static void AddEchelonExtensionType_(FlatBufferBuilder builder, Plana.FlatData.EchelonExtensionType echelonExtensionType_) { builder.AddInt(1, (int)echelonExtensionType_, 0); }
  public static void AddTransSupportStatsFactor(FlatBufferBuilder builder, int transSupportStatsFactor) { builder.AddInt(2, transSupportStatsFactor, 0); }
  public static void AddStatTransType_(FlatBufferBuilder builder, Plana.FlatData.StatTransType statTransType_) { builder.AddInt(3, (int)statTransType_, 0); }
  public static Offset<Plana.FlatData.CharacterStatsTransExcel> EndCharacterStatsTransExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.CharacterStatsTransExcel>(o);
  }
  public CharacterStatsTransExcelT UnPack() {
    var _o = new CharacterStatsTransExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterStatsTransExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("CharacterStatsTrans");
    _o.TransSupportStats = TableEncryptionService.Convert(this.TransSupportStats, key);
    _o.EchelonExtensionType_ = TableEncryptionService.Convert(this.EchelonExtensionType_, key);
    _o.TransSupportStatsFactor = TableEncryptionService.Convert(this.TransSupportStatsFactor, key);
    _o.StatTransType_ = TableEncryptionService.Convert(this.StatTransType_, key);
  }
  public static Offset<Plana.FlatData.CharacterStatsTransExcel> Pack(FlatBufferBuilder builder, CharacterStatsTransExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.CharacterStatsTransExcel>);
    return CreateCharacterStatsTransExcel(
      builder,
      _o.TransSupportStats,
      _o.EchelonExtensionType_,
      _o.TransSupportStatsFactor,
      _o.StatTransType_);
  }
}

public class CharacterStatsTransExcelT
{
  public Plana.FlatData.StatType TransSupportStats { get; set; }
  public Plana.FlatData.EchelonExtensionType EchelonExtensionType_ { get; set; }
  public int TransSupportStatsFactor { get; set; }
  public Plana.FlatData.StatTransType StatTransType_ { get; set; }

  public CharacterStatsTransExcelT() {
    this.TransSupportStats = Plana.FlatData.StatType.None;
    this.EchelonExtensionType_ = Plana.FlatData.EchelonExtensionType.Base;
    this.TransSupportStatsFactor = 0;
    this.StatTransType_ = Plana.FlatData.StatTransType.SpecialTransStat;
  }
}


static public class CharacterStatsTransExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TransSupportStats*/, 4 /*Plana.FlatData.StatType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*EchelonExtensionType_*/, 4 /*Plana.FlatData.EchelonExtensionType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*TransSupportStatsFactor*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*StatTransType_*/, 4 /*Plana.FlatData.StatTransType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
