// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct UnderCoverStageExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static UnderCoverStageExcel GetRootAsUnderCoverStageExcel(ByteBuffer _bb) { return GetRootAsUnderCoverStageExcel(_bb, new UnderCoverStageExcel()); }
  public static UnderCoverStageExcel GetRootAsUnderCoverStageExcel(ByteBuffer _bb, UnderCoverStageExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UnderCoverStageExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string StageNameFile { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageNameFileBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetStageNameFileBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetStageNameFileArray() { return __p.__vector_as_array<byte>(6); }
  public int StageTryCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ApplySkip { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SkipCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowClearScene { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint StageTips { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint StageName { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Plana.FlatData.UnderCoverStageExcel> CreateUnderCoverStageExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      StringOffset StageNameFileOffset = default(StringOffset),
      int StageTryCount = 0,
      bool ApplySkip = false,
      int SkipCount = 0,
      bool ShowClearScene = false,
      uint StageTips = 0,
      uint StageName = 0) {
    builder.StartTable(8);
    UnderCoverStageExcel.AddGroupId(builder, GroupId);
    UnderCoverStageExcel.AddStageName(builder, StageName);
    UnderCoverStageExcel.AddStageTips(builder, StageTips);
    UnderCoverStageExcel.AddSkipCount(builder, SkipCount);
    UnderCoverStageExcel.AddStageTryCount(builder, StageTryCount);
    UnderCoverStageExcel.AddStageNameFile(builder, StageNameFileOffset);
    UnderCoverStageExcel.AddShowClearScene(builder, ShowClearScene);
    UnderCoverStageExcel.AddApplySkip(builder, ApplySkip);
    return UnderCoverStageExcel.EndUnderCoverStageExcel(builder);
  }

  public static void StartUnderCoverStageExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddStageNameFile(FlatBufferBuilder builder, StringOffset stageNameFileOffset) { builder.AddOffset(1, stageNameFileOffset.Value, 0); }
  public static void AddStageTryCount(FlatBufferBuilder builder, int stageTryCount) { builder.AddInt(2, stageTryCount, 0); }
  public static void AddApplySkip(FlatBufferBuilder builder, bool applySkip) { builder.AddBool(3, applySkip, false); }
  public static void AddSkipCount(FlatBufferBuilder builder, int skipCount) { builder.AddInt(4, skipCount, 0); }
  public static void AddShowClearScene(FlatBufferBuilder builder, bool showClearScene) { builder.AddBool(5, showClearScene, false); }
  public static void AddStageTips(FlatBufferBuilder builder, uint stageTips) { builder.AddUint(6, stageTips, 0); }
  public static void AddStageName(FlatBufferBuilder builder, uint stageName) { builder.AddUint(7, stageName, 0); }
  public static Offset<Plana.FlatData.UnderCoverStageExcel> EndUnderCoverStageExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.UnderCoverStageExcel>(o);
  }
  public UnderCoverStageExcelT UnPack() {
    var _o = new UnderCoverStageExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(UnderCoverStageExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("UnderCoverStage");
    _o.GroupId = TableEncryptionService.Convert(this.GroupId, key);
    _o.StageNameFile = TableEncryptionService.Convert(this.StageNameFile, key);
    _o.StageTryCount = TableEncryptionService.Convert(this.StageTryCount, key);
    _o.ApplySkip = TableEncryptionService.Convert(this.ApplySkip, key);
    _o.SkipCount = TableEncryptionService.Convert(this.SkipCount, key);
    _o.ShowClearScene = TableEncryptionService.Convert(this.ShowClearScene, key);
    _o.StageTips = TableEncryptionService.Convert(this.StageTips, key);
    _o.StageName = TableEncryptionService.Convert(this.StageName, key);
  }
  public static Offset<Plana.FlatData.UnderCoverStageExcel> Pack(FlatBufferBuilder builder, UnderCoverStageExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.UnderCoverStageExcel>);
    var _StageNameFile = _o.StageNameFile == null ? default(StringOffset) : builder.CreateString(_o.StageNameFile);
    return CreateUnderCoverStageExcel(
      builder,
      _o.GroupId,
      _StageNameFile,
      _o.StageTryCount,
      _o.ApplySkip,
      _o.SkipCount,
      _o.ShowClearScene,
      _o.StageTips,
      _o.StageName);
  }
}

public class UnderCoverStageExcelT
{
  public long GroupId { get; set; }
  public string StageNameFile { get; set; }
  public int StageTryCount { get; set; }
  public bool ApplySkip { get; set; }
  public int SkipCount { get; set; }
  public bool ShowClearScene { get; set; }
  public uint StageTips { get; set; }
  public uint StageName { get; set; }

  public UnderCoverStageExcelT() {
    this.GroupId = 0;
    this.StageNameFile = null;
    this.StageTryCount = 0;
    this.ApplySkip = false;
    this.SkipCount = 0;
    this.ShowClearScene = false;
    this.StageTips = 0;
    this.StageName = 0;
  }
}


static public class UnderCoverStageExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 6 /*StageNameFile*/, false)
      && verifier.VerifyField(tablePos, 8 /*StageTryCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ApplySkip*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*SkipCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ShowClearScene*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*StageTips*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 18 /*StageName*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
