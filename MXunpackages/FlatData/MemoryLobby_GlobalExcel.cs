// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct MemoryLobby_GlobalExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MemoryLobby_GlobalExcel GetRootAsMemoryLobby_GlobalExcel(ByteBuffer _bb) { return GetRootAsMemoryLobby_GlobalExcel(_bb, new MemoryLobby_GlobalExcel()); }
  public static MemoryLobby_GlobalExcel GetRootAsMemoryLobby_GlobalExcel(ByteBuffer _bb, MemoryLobby_GlobalExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MemoryLobby_GlobalExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CharacterId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string PrefabNameKr { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameKrBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameKrBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrefabNameKrArray() { return __p.__vector_as_array<byte>(8); }
  public string PrefabNameTw { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameTwBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameTwBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPrefabNameTwArray() { return __p.__vector_as_array<byte>(10); }
  public string PrefabNameAsia { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameAsiaBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameAsiaBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPrefabNameAsiaArray() { return __p.__vector_as_array<byte>(12); }
  public string PrefabNameNa { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameNaBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameNaBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPrefabNameNaArray() { return __p.__vector_as_array<byte>(14); }
  public string PrefabNameGlobal { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameGlobalBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameGlobalBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetPrefabNameGlobalArray() { return __p.__vector_as_array<byte>(16); }
  public string PrefabNameTeen { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameTeenBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameTeenBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPrefabNameTeenArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<Plana.FlatData.MemoryLobby_GlobalExcel> CreateMemoryLobby_GlobalExcel(FlatBufferBuilder builder,
      long Id = 0,
      long CharacterId = 0,
      StringOffset PrefabNameKrOffset = default(StringOffset),
      StringOffset PrefabNameTwOffset = default(StringOffset),
      StringOffset PrefabNameAsiaOffset = default(StringOffset),
      StringOffset PrefabNameNaOffset = default(StringOffset),
      StringOffset PrefabNameGlobalOffset = default(StringOffset),
      StringOffset PrefabNameTeenOffset = default(StringOffset)) {
    builder.StartTable(8);
    MemoryLobby_GlobalExcel.AddCharacterId(builder, CharacterId);
    MemoryLobby_GlobalExcel.AddId(builder, Id);
    MemoryLobby_GlobalExcel.AddPrefabNameTeen(builder, PrefabNameTeenOffset);
    MemoryLobby_GlobalExcel.AddPrefabNameGlobal(builder, PrefabNameGlobalOffset);
    MemoryLobby_GlobalExcel.AddPrefabNameNa(builder, PrefabNameNaOffset);
    MemoryLobby_GlobalExcel.AddPrefabNameAsia(builder, PrefabNameAsiaOffset);
    MemoryLobby_GlobalExcel.AddPrefabNameTw(builder, PrefabNameTwOffset);
    MemoryLobby_GlobalExcel.AddPrefabNameKr(builder, PrefabNameKrOffset);
    return MemoryLobby_GlobalExcel.EndMemoryLobby_GlobalExcel(builder);
  }

  public static void StartMemoryLobby_GlobalExcel(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(1, characterId, 0); }
  public static void AddPrefabNameKr(FlatBufferBuilder builder, StringOffset prefabNameKrOffset) { builder.AddOffset(2, prefabNameKrOffset.Value, 0); }
  public static void AddPrefabNameTw(FlatBufferBuilder builder, StringOffset prefabNameTwOffset) { builder.AddOffset(3, prefabNameTwOffset.Value, 0); }
  public static void AddPrefabNameAsia(FlatBufferBuilder builder, StringOffset prefabNameAsiaOffset) { builder.AddOffset(4, prefabNameAsiaOffset.Value, 0); }
  public static void AddPrefabNameNa(FlatBufferBuilder builder, StringOffset prefabNameNaOffset) { builder.AddOffset(5, prefabNameNaOffset.Value, 0); }
  public static void AddPrefabNameGlobal(FlatBufferBuilder builder, StringOffset prefabNameGlobalOffset) { builder.AddOffset(6, prefabNameGlobalOffset.Value, 0); }
  public static void AddPrefabNameTeen(FlatBufferBuilder builder, StringOffset prefabNameTeenOffset) { builder.AddOffset(7, prefabNameTeenOffset.Value, 0); }
  public static Offset<Plana.FlatData.MemoryLobby_GlobalExcel> EndMemoryLobby_GlobalExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.MemoryLobby_GlobalExcel>(o);
  }
  public MemoryLobby_GlobalExcelT UnPack() {
    var _o = new MemoryLobby_GlobalExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MemoryLobby_GlobalExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("MemoryLobby_Global");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.CharacterId = TableEncryptionService.Convert(this.CharacterId, key);
    _o.PrefabNameKr = TableEncryptionService.Convert(this.PrefabNameKr, key);
    _o.PrefabNameTw = TableEncryptionService.Convert(this.PrefabNameTw, key);
    _o.PrefabNameAsia = TableEncryptionService.Convert(this.PrefabNameAsia, key);
    _o.PrefabNameNa = TableEncryptionService.Convert(this.PrefabNameNa, key);
    _o.PrefabNameGlobal = TableEncryptionService.Convert(this.PrefabNameGlobal, key);
    _o.PrefabNameTeen = TableEncryptionService.Convert(this.PrefabNameTeen, key);
  }
  public static Offset<Plana.FlatData.MemoryLobby_GlobalExcel> Pack(FlatBufferBuilder builder, MemoryLobby_GlobalExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.MemoryLobby_GlobalExcel>);
    var _PrefabNameKr = _o.PrefabNameKr == null ? default(StringOffset) : builder.CreateString(_o.PrefabNameKr);
    var _PrefabNameTw = _o.PrefabNameTw == null ? default(StringOffset) : builder.CreateString(_o.PrefabNameTw);
    var _PrefabNameAsia = _o.PrefabNameAsia == null ? default(StringOffset) : builder.CreateString(_o.PrefabNameAsia);
    var _PrefabNameNa = _o.PrefabNameNa == null ? default(StringOffset) : builder.CreateString(_o.PrefabNameNa);
    var _PrefabNameGlobal = _o.PrefabNameGlobal == null ? default(StringOffset) : builder.CreateString(_o.PrefabNameGlobal);
    var _PrefabNameTeen = _o.PrefabNameTeen == null ? default(StringOffset) : builder.CreateString(_o.PrefabNameTeen);
    return CreateMemoryLobby_GlobalExcel(
      builder,
      _o.Id,
      _o.CharacterId,
      _PrefabNameKr,
      _PrefabNameTw,
      _PrefabNameAsia,
      _PrefabNameNa,
      _PrefabNameGlobal,
      _PrefabNameTeen);
  }
}

public class MemoryLobby_GlobalExcelT
{
  public long Id { get; set; }
  public long CharacterId { get; set; }
  public string PrefabNameKr { get; set; }
  public string PrefabNameTw { get; set; }
  public string PrefabNameAsia { get; set; }
  public string PrefabNameNa { get; set; }
  public string PrefabNameGlobal { get; set; }
  public string PrefabNameTeen { get; set; }

  public MemoryLobby_GlobalExcelT() {
    this.Id = 0;
    this.CharacterId = 0;
    this.PrefabNameKr = null;
    this.PrefabNameTw = null;
    this.PrefabNameAsia = null;
    this.PrefabNameNa = null;
    this.PrefabNameGlobal = null;
    this.PrefabNameTeen = null;
  }
}


static public class MemoryLobby_GlobalExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 8 /*PrefabNameKr*/, false)
      && verifier.VerifyString(tablePos, 10 /*PrefabNameTw*/, false)
      && verifier.VerifyString(tablePos, 12 /*PrefabNameAsia*/, false)
      && verifier.VerifyString(tablePos, 14 /*PrefabNameNa*/, false)
      && verifier.VerifyString(tablePos, 16 /*PrefabNameGlobal*/, false)
      && verifier.VerifyString(tablePos, 18 /*PrefabNameTeen*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
