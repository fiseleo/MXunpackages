// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct ConstCombatExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ConstCombatExcel GetRootAsConstCombatExcel(ByteBuffer _bb) { return GetRootAsConstCombatExcel(_bb, new ConstCombatExcel()); }
  public static ConstCombatExcel GetRootAsConstCombatExcel(ByteBuffer _bb, ConstCombatExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConstCombatExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SkillHandCount { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DyingTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffIconBlinkTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ShowBufficonEXSkill { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowBufficonPassiveSkill { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowBufficonExtraPassiveSkill { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowBufficonLeaderSkill { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ShowBufficonGroundPassiveSkill { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string SuppliesConditionStringId { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSuppliesConditionStringIdBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetSuppliesConditionStringIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetSuppliesConditionStringIdArray() { return __p.__vector_as_array<byte>(20); }
  public float PublicSpeechBubbleOffsetX { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PublicSpeechBubbleOffsetY { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PublicSpeechBubbleOffsetZ { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float PublicSpeechDuration { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int ShowRaidListCount { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long MaxRaidTicketCount { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long MaxRaidBossSkillSlot { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string EngageTimelinePath { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEngageTimelinePathBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetEngageTimelinePathBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetEngageTimelinePathArray() { return __p.__vector_as_array<byte>(36); }
  public string EngageWithSupporterTimelinePath { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEngageWithSupporterTimelinePathBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetEngageWithSupporterTimelinePathBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetEngageWithSupporterTimelinePathArray() { return __p.__vector_as_array<byte>(38); }
  public string VictoryTimelinePath { get { int o = __p.__offset(40); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(40, 1); }
#else
  public ArraySegment<byte>? GetVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public byte[] GetVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(40); }
  public long TimeLimitAlarm { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int EchelonMaxCommonCost { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EchelonInitCommonCost { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long SkillSlotCoolTime { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long EnemyRegenCost { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ChampionRegenCost { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long PlayerRegenCostDelay { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CrowdControlFactor { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string RaidOpenScenarioId { get { int o = __p.__offset(58); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRaidOpenScenarioIdBytes() { return __p.__vector_as_span<byte>(58, 1); }
#else
  public ArraySegment<byte>? GetRaidOpenScenarioIdBytes() { return __p.__vector_as_arraysegment(58); }
#endif
  public byte[] GetRaidOpenScenarioIdArray() { return __p.__vector_as_array<byte>(58); }
  public string EliminateRaidOpenScenarioId { get { int o = __p.__offset(60); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEliminateRaidOpenScenarioIdBytes() { return __p.__vector_as_span<byte>(60, 1); }
#else
  public ArraySegment<byte>? GetEliminateRaidOpenScenarioIdBytes() { return __p.__vector_as_arraysegment(60); }
#endif
  public byte[] GetEliminateRaidOpenScenarioIdArray() { return __p.__vector_as_array<byte>(60); }
  public long DefenceConstA { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenceConstB { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenceConstC { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long DefenceConstD { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyConstA { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyConstB { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyConstC { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long AccuracyConstD { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalConstA { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalConstB { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalConstC { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long CriticalConstD { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int MaxGroupBuffLevel { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EmojiDefaultTime { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long TimeLineActionRotateSpeed { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BodyRotateSpeed { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long NormalTimeScale { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FastTimeScale { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long BulletTimeScale { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UIDisplayDelayAfterSkillCutIn { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool UseInitialRangeForCoverMove { get { int o = __p.__offset(102); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public long SlowTimeScale { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float AimIKMinDegree { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AimIKMaxDegree { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int MinimumClearTime { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinimumClearLevelGap { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CheckCheaterMaxUseCostNonArena { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CheckCheaterMaxUseCostArena { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long AllowedMaxTimeScale { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RandomAnimationOutput { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SummonedTeleportDistance { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int ArenaMinimumClearTime { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long WORLDBOSSBATTLELITTLE { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLELITTLETw { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLELITTLEAsia { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLELITTLENa { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLELITTLEGlobal { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEMIDDLE { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEMIDDLETw { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEMIDDLEAsia { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEMIDDLENa { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEMIDDLEGlobal { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEHIGH { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEHIGHTw { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEHIGHAsia { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEHIGHNa { get { int o = __p.__offset(152); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEHIGHGlobal { get { int o = __p.__offset(154); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEVERYHIGH { get { int o = __p.__offset(156); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEVERYHIGHTw { get { int o = __p.__offset(158); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEVERYHIGHAsia { get { int o = __p.__offset(160); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEVERYHIGHNa { get { int o = __p.__offset(162); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WORLDBOSSBATTLEVERYHIGHGlobal { get { int o = __p.__offset(164); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidAutoSyncTermSecond { get { int o = __p.__offset(166); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidBossHpDecreaseTerm { get { int o = __p.__offset(168); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long WorldRaidBossParcelReactionDelay { get { int o = __p.__offset(170); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long RaidRankingJumpMinimumWaitingTime { get { int o = __p.__offset(172); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float EffectTeleportDistance { get { int o = __p.__offset(174); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public long AuraExitThresholdMargin { get { int o = __p.__offset(176); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long TSAInteractionDamageFactor { get { int o = __p.__offset(178); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long VictoryInteractionRate { get { int o = __p.__offset(180); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string EchelonExtensionEngageTimelinePath { get { int o = __p.__offset(182); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEchelonExtensionEngageTimelinePathBytes() { return __p.__vector_as_span<byte>(182, 1); }
#else
  public ArraySegment<byte>? GetEchelonExtensionEngageTimelinePathBytes() { return __p.__vector_as_arraysegment(182); }
#endif
  public byte[] GetEchelonExtensionEngageTimelinePathArray() { return __p.__vector_as_array<byte>(182); }
  public string EchelonExtensionEngageWithSupporterTimelinePath { get { int o = __p.__offset(184); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEchelonExtensionEngageWithSupporterTimelinePathBytes() { return __p.__vector_as_span<byte>(184, 1); }
#else
  public ArraySegment<byte>? GetEchelonExtensionEngageWithSupporterTimelinePathBytes() { return __p.__vector_as_arraysegment(184); }
#endif
  public byte[] GetEchelonExtensionEngageWithSupporterTimelinePathArray() { return __p.__vector_as_array<byte>(184); }
  public string EchelonExtensionVictoryTimelinePath { get { int o = __p.__offset(186); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEchelonExtensionVictoryTimelinePathBytes() { return __p.__vector_as_span<byte>(186, 1); }
#else
  public ArraySegment<byte>? GetEchelonExtensionVictoryTimelinePathBytes() { return __p.__vector_as_arraysegment(186); }
#endif
  public byte[] GetEchelonExtensionVictoryTimelinePathArray() { return __p.__vector_as_array<byte>(186); }
  public int EchelonExtensionEchelonMaxCommonCost { get { int o = __p.__offset(188); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EchelonExtensionEchelonInitCommonCost { get { int o = __p.__offset(190); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long EchelonExtensionCostRegenRatio { get { int o = __p.__offset(192); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CheckCheaterMaxUseCostMultiFloorRaid { get { int o = __p.__offset(194); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Plana.FlatData.ConstCombatExcel> CreateConstCombatExcel(FlatBufferBuilder builder,
      int SkillHandCount = 0,
      int DyingTime = 0,
      int BuffIconBlinkTime = 0,
      bool ShowBufficonEXSkill = false,
      bool ShowBufficonPassiveSkill = false,
      bool ShowBufficonExtraPassiveSkill = false,
      bool ShowBufficonLeaderSkill = false,
      bool ShowBufficonGroundPassiveSkill = false,
      StringOffset SuppliesConditionStringIdOffset = default(StringOffset),
      float PublicSpeechBubbleOffsetX = 0.0f,
      float PublicSpeechBubbleOffsetY = 0.0f,
      float PublicSpeechBubbleOffsetZ = 0.0f,
      float PublicSpeechDuration = 0.0f,
      int ShowRaidListCount = 0,
      long MaxRaidTicketCount = 0,
      long MaxRaidBossSkillSlot = 0,
      StringOffset EngageTimelinePathOffset = default(StringOffset),
      StringOffset EngageWithSupporterTimelinePathOffset = default(StringOffset),
      StringOffset VictoryTimelinePathOffset = default(StringOffset),
      long TimeLimitAlarm = 0,
      int EchelonMaxCommonCost = 0,
      int EchelonInitCommonCost = 0,
      long SkillSlotCoolTime = 0,
      long EnemyRegenCost = 0,
      long ChampionRegenCost = 0,
      long PlayerRegenCostDelay = 0,
      long CrowdControlFactor = 0,
      StringOffset RaidOpenScenarioIdOffset = default(StringOffset),
      StringOffset EliminateRaidOpenScenarioIdOffset = default(StringOffset),
      long DefenceConstA = 0,
      long DefenceConstB = 0,
      long DefenceConstC = 0,
      long DefenceConstD = 0,
      long AccuracyConstA = 0,
      long AccuracyConstB = 0,
      long AccuracyConstC = 0,
      long AccuracyConstD = 0,
      long CriticalConstA = 0,
      long CriticalConstB = 0,
      long CriticalConstC = 0,
      long CriticalConstD = 0,
      int MaxGroupBuffLevel = 0,
      int EmojiDefaultTime = 0,
      long TimeLineActionRotateSpeed = 0,
      long BodyRotateSpeed = 0,
      long NormalTimeScale = 0,
      long FastTimeScale = 0,
      long BulletTimeScale = 0,
      long UIDisplayDelayAfterSkillCutIn = 0,
      bool UseInitialRangeForCoverMove = false,
      long SlowTimeScale = 0,
      float AimIKMinDegree = 0.0f,
      float AimIKMaxDegree = 0.0f,
      int MinimumClearTime = 0,
      int MinimumClearLevelGap = 0,
      int CheckCheaterMaxUseCostNonArena = 0,
      int CheckCheaterMaxUseCostArena = 0,
      long AllowedMaxTimeScale = 0,
      long RandomAnimationOutput = 0,
      long SummonedTeleportDistance = 0,
      int ArenaMinimumClearTime = 0,
      long WORLDBOSSBATTLELITTLE = 0,
      long WORLDBOSSBATTLELITTLETw = 0,
      long WORLDBOSSBATTLELITTLEAsia = 0,
      long WORLDBOSSBATTLELITTLENa = 0,
      long WORLDBOSSBATTLELITTLEGlobal = 0,
      long WORLDBOSSBATTLEMIDDLE = 0,
      long WORLDBOSSBATTLEMIDDLETw = 0,
      long WORLDBOSSBATTLEMIDDLEAsia = 0,
      long WORLDBOSSBATTLEMIDDLENa = 0,
      long WORLDBOSSBATTLEMIDDLEGlobal = 0,
      long WORLDBOSSBATTLEHIGH = 0,
      long WORLDBOSSBATTLEHIGHTw = 0,
      long WORLDBOSSBATTLEHIGHAsia = 0,
      long WORLDBOSSBATTLEHIGHNa = 0,
      long WORLDBOSSBATTLEHIGHGlobal = 0,
      long WORLDBOSSBATTLEVERYHIGH = 0,
      long WORLDBOSSBATTLEVERYHIGHTw = 0,
      long WORLDBOSSBATTLEVERYHIGHAsia = 0,
      long WORLDBOSSBATTLEVERYHIGHNa = 0,
      long WORLDBOSSBATTLEVERYHIGHGlobal = 0,
      long WorldRaidAutoSyncTermSecond = 0,
      long WorldRaidBossHpDecreaseTerm = 0,
      long WorldRaidBossParcelReactionDelay = 0,
      long RaidRankingJumpMinimumWaitingTime = 0,
      float EffectTeleportDistance = 0.0f,
      long AuraExitThresholdMargin = 0,
      long TSAInteractionDamageFactor = 0,
      long VictoryInteractionRate = 0,
      StringOffset EchelonExtensionEngageTimelinePathOffset = default(StringOffset),
      StringOffset EchelonExtensionEngageWithSupporterTimelinePathOffset = default(StringOffset),
      StringOffset EchelonExtensionVictoryTimelinePathOffset = default(StringOffset),
      int EchelonExtensionEchelonMaxCommonCost = 0,
      int EchelonExtensionEchelonInitCommonCost = 0,
      long EchelonExtensionCostRegenRatio = 0,
      int CheckCheaterMaxUseCostMultiFloorRaid = 0) {
    builder.StartTable(96);
    ConstCombatExcel.AddEchelonExtensionCostRegenRatio(builder, EchelonExtensionCostRegenRatio);
    ConstCombatExcel.AddVictoryInteractionRate(builder, VictoryInteractionRate);
    ConstCombatExcel.AddTSAInteractionDamageFactor(builder, TSAInteractionDamageFactor);
    ConstCombatExcel.AddAuraExitThresholdMargin(builder, AuraExitThresholdMargin);
    ConstCombatExcel.AddRaidRankingJumpMinimumWaitingTime(builder, RaidRankingJumpMinimumWaitingTime);
    ConstCombatExcel.AddWorldRaidBossParcelReactionDelay(builder, WorldRaidBossParcelReactionDelay);
    ConstCombatExcel.AddWorldRaidBossHpDecreaseTerm(builder, WorldRaidBossHpDecreaseTerm);
    ConstCombatExcel.AddWorldRaidAutoSyncTermSecond(builder, WorldRaidAutoSyncTermSecond);
    ConstCombatExcel.AddWORLDBOSSBATTLEVERYHIGHGlobal(builder, WORLDBOSSBATTLEVERYHIGHGlobal);
    ConstCombatExcel.AddWORLDBOSSBATTLEVERYHIGHNa(builder, WORLDBOSSBATTLEVERYHIGHNa);
    ConstCombatExcel.AddWORLDBOSSBATTLEVERYHIGHAsia(builder, WORLDBOSSBATTLEVERYHIGHAsia);
    ConstCombatExcel.AddWORLDBOSSBATTLEVERYHIGHTw(builder, WORLDBOSSBATTLEVERYHIGHTw);
    ConstCombatExcel.AddWORLDBOSSBATTLEVERYHIGH(builder, WORLDBOSSBATTLEVERYHIGH);
    ConstCombatExcel.AddWORLDBOSSBATTLEHIGHGlobal(builder, WORLDBOSSBATTLEHIGHGlobal);
    ConstCombatExcel.AddWORLDBOSSBATTLEHIGHNa(builder, WORLDBOSSBATTLEHIGHNa);
    ConstCombatExcel.AddWORLDBOSSBATTLEHIGHAsia(builder, WORLDBOSSBATTLEHIGHAsia);
    ConstCombatExcel.AddWORLDBOSSBATTLEHIGHTw(builder, WORLDBOSSBATTLEHIGHTw);
    ConstCombatExcel.AddWORLDBOSSBATTLEHIGH(builder, WORLDBOSSBATTLEHIGH);
    ConstCombatExcel.AddWORLDBOSSBATTLEMIDDLEGlobal(builder, WORLDBOSSBATTLEMIDDLEGlobal);
    ConstCombatExcel.AddWORLDBOSSBATTLEMIDDLENa(builder, WORLDBOSSBATTLEMIDDLENa);
    ConstCombatExcel.AddWORLDBOSSBATTLEMIDDLEAsia(builder, WORLDBOSSBATTLEMIDDLEAsia);
    ConstCombatExcel.AddWORLDBOSSBATTLEMIDDLETw(builder, WORLDBOSSBATTLEMIDDLETw);
    ConstCombatExcel.AddWORLDBOSSBATTLEMIDDLE(builder, WORLDBOSSBATTLEMIDDLE);
    ConstCombatExcel.AddWORLDBOSSBATTLELITTLEGlobal(builder, WORLDBOSSBATTLELITTLEGlobal);
    ConstCombatExcel.AddWORLDBOSSBATTLELITTLENa(builder, WORLDBOSSBATTLELITTLENa);
    ConstCombatExcel.AddWORLDBOSSBATTLELITTLEAsia(builder, WORLDBOSSBATTLELITTLEAsia);
    ConstCombatExcel.AddWORLDBOSSBATTLELITTLETw(builder, WORLDBOSSBATTLELITTLETw);
    ConstCombatExcel.AddWORLDBOSSBATTLELITTLE(builder, WORLDBOSSBATTLELITTLE);
    ConstCombatExcel.AddSummonedTeleportDistance(builder, SummonedTeleportDistance);
    ConstCombatExcel.AddRandomAnimationOutput(builder, RandomAnimationOutput);
    ConstCombatExcel.AddAllowedMaxTimeScale(builder, AllowedMaxTimeScale);
    ConstCombatExcel.AddSlowTimeScale(builder, SlowTimeScale);
    ConstCombatExcel.AddUIDisplayDelayAfterSkillCutIn(builder, UIDisplayDelayAfterSkillCutIn);
    ConstCombatExcel.AddBulletTimeScale(builder, BulletTimeScale);
    ConstCombatExcel.AddFastTimeScale(builder, FastTimeScale);
    ConstCombatExcel.AddNormalTimeScale(builder, NormalTimeScale);
    ConstCombatExcel.AddBodyRotateSpeed(builder, BodyRotateSpeed);
    ConstCombatExcel.AddTimeLineActionRotateSpeed(builder, TimeLineActionRotateSpeed);
    ConstCombatExcel.AddCriticalConstD(builder, CriticalConstD);
    ConstCombatExcel.AddCriticalConstC(builder, CriticalConstC);
    ConstCombatExcel.AddCriticalConstB(builder, CriticalConstB);
    ConstCombatExcel.AddCriticalConstA(builder, CriticalConstA);
    ConstCombatExcel.AddAccuracyConstD(builder, AccuracyConstD);
    ConstCombatExcel.AddAccuracyConstC(builder, AccuracyConstC);
    ConstCombatExcel.AddAccuracyConstB(builder, AccuracyConstB);
    ConstCombatExcel.AddAccuracyConstA(builder, AccuracyConstA);
    ConstCombatExcel.AddDefenceConstD(builder, DefenceConstD);
    ConstCombatExcel.AddDefenceConstC(builder, DefenceConstC);
    ConstCombatExcel.AddDefenceConstB(builder, DefenceConstB);
    ConstCombatExcel.AddDefenceConstA(builder, DefenceConstA);
    ConstCombatExcel.AddCrowdControlFactor(builder, CrowdControlFactor);
    ConstCombatExcel.AddPlayerRegenCostDelay(builder, PlayerRegenCostDelay);
    ConstCombatExcel.AddChampionRegenCost(builder, ChampionRegenCost);
    ConstCombatExcel.AddEnemyRegenCost(builder, EnemyRegenCost);
    ConstCombatExcel.AddSkillSlotCoolTime(builder, SkillSlotCoolTime);
    ConstCombatExcel.AddTimeLimitAlarm(builder, TimeLimitAlarm);
    ConstCombatExcel.AddMaxRaidBossSkillSlot(builder, MaxRaidBossSkillSlot);
    ConstCombatExcel.AddMaxRaidTicketCount(builder, MaxRaidTicketCount);
    ConstCombatExcel.AddCheckCheaterMaxUseCostMultiFloorRaid(builder, CheckCheaterMaxUseCostMultiFloorRaid);
    ConstCombatExcel.AddEchelonExtensionEchelonInitCommonCost(builder, EchelonExtensionEchelonInitCommonCost);
    ConstCombatExcel.AddEchelonExtensionEchelonMaxCommonCost(builder, EchelonExtensionEchelonMaxCommonCost);
    ConstCombatExcel.AddEchelonExtensionVictoryTimelinePath(builder, EchelonExtensionVictoryTimelinePathOffset);
    ConstCombatExcel.AddEchelonExtensionEngageWithSupporterTimelinePath(builder, EchelonExtensionEngageWithSupporterTimelinePathOffset);
    ConstCombatExcel.AddEchelonExtensionEngageTimelinePath(builder, EchelonExtensionEngageTimelinePathOffset);
    ConstCombatExcel.AddEffectTeleportDistance(builder, EffectTeleportDistance);
    ConstCombatExcel.AddArenaMinimumClearTime(builder, ArenaMinimumClearTime);
    ConstCombatExcel.AddCheckCheaterMaxUseCostArena(builder, CheckCheaterMaxUseCostArena);
    ConstCombatExcel.AddCheckCheaterMaxUseCostNonArena(builder, CheckCheaterMaxUseCostNonArena);
    ConstCombatExcel.AddMinimumClearLevelGap(builder, MinimumClearLevelGap);
    ConstCombatExcel.AddMinimumClearTime(builder, MinimumClearTime);
    ConstCombatExcel.AddAimIKMaxDegree(builder, AimIKMaxDegree);
    ConstCombatExcel.AddAimIKMinDegree(builder, AimIKMinDegree);
    ConstCombatExcel.AddEmojiDefaultTime(builder, EmojiDefaultTime);
    ConstCombatExcel.AddMaxGroupBuffLevel(builder, MaxGroupBuffLevel);
    ConstCombatExcel.AddEliminateRaidOpenScenarioId(builder, EliminateRaidOpenScenarioIdOffset);
    ConstCombatExcel.AddRaidOpenScenarioId(builder, RaidOpenScenarioIdOffset);
    ConstCombatExcel.AddEchelonInitCommonCost(builder, EchelonInitCommonCost);
    ConstCombatExcel.AddEchelonMaxCommonCost(builder, EchelonMaxCommonCost);
    ConstCombatExcel.AddVictoryTimelinePath(builder, VictoryTimelinePathOffset);
    ConstCombatExcel.AddEngageWithSupporterTimelinePath(builder, EngageWithSupporterTimelinePathOffset);
    ConstCombatExcel.AddEngageTimelinePath(builder, EngageTimelinePathOffset);
    ConstCombatExcel.AddShowRaidListCount(builder, ShowRaidListCount);
    ConstCombatExcel.AddPublicSpeechDuration(builder, PublicSpeechDuration);
    ConstCombatExcel.AddPublicSpeechBubbleOffsetZ(builder, PublicSpeechBubbleOffsetZ);
    ConstCombatExcel.AddPublicSpeechBubbleOffsetY(builder, PublicSpeechBubbleOffsetY);
    ConstCombatExcel.AddPublicSpeechBubbleOffsetX(builder, PublicSpeechBubbleOffsetX);
    ConstCombatExcel.AddSuppliesConditionStringId(builder, SuppliesConditionStringIdOffset);
    ConstCombatExcel.AddBuffIconBlinkTime(builder, BuffIconBlinkTime);
    ConstCombatExcel.AddDyingTime(builder, DyingTime);
    ConstCombatExcel.AddSkillHandCount(builder, SkillHandCount);
    ConstCombatExcel.AddUseInitialRangeForCoverMove(builder, UseInitialRangeForCoverMove);
    ConstCombatExcel.AddShowBufficonGroundPassiveSkill(builder, ShowBufficonGroundPassiveSkill);
    ConstCombatExcel.AddShowBufficonLeaderSkill(builder, ShowBufficonLeaderSkill);
    ConstCombatExcel.AddShowBufficonExtraPassiveSkill(builder, ShowBufficonExtraPassiveSkill);
    ConstCombatExcel.AddShowBufficonPassiveSkill(builder, ShowBufficonPassiveSkill);
    ConstCombatExcel.AddShowBufficonEXSkill(builder, ShowBufficonEXSkill);
    return ConstCombatExcel.EndConstCombatExcel(builder);
  }

  public static void StartConstCombatExcel(FlatBufferBuilder builder) { builder.StartTable(96); }
  public static void AddSkillHandCount(FlatBufferBuilder builder, int skillHandCount) { builder.AddInt(0, skillHandCount, 0); }
  public static void AddDyingTime(FlatBufferBuilder builder, int dyingTime) { builder.AddInt(1, dyingTime, 0); }
  public static void AddBuffIconBlinkTime(FlatBufferBuilder builder, int buffIconBlinkTime) { builder.AddInt(2, buffIconBlinkTime, 0); }
  public static void AddShowBufficonEXSkill(FlatBufferBuilder builder, bool showBufficonEXSkill) { builder.AddBool(3, showBufficonEXSkill, false); }
  public static void AddShowBufficonPassiveSkill(FlatBufferBuilder builder, bool showBufficonPassiveSkill) { builder.AddBool(4, showBufficonPassiveSkill, false); }
  public static void AddShowBufficonExtraPassiveSkill(FlatBufferBuilder builder, bool showBufficonExtraPassiveSkill) { builder.AddBool(5, showBufficonExtraPassiveSkill, false); }
  public static void AddShowBufficonLeaderSkill(FlatBufferBuilder builder, bool showBufficonLeaderSkill) { builder.AddBool(6, showBufficonLeaderSkill, false); }
  public static void AddShowBufficonGroundPassiveSkill(FlatBufferBuilder builder, bool showBufficonGroundPassiveSkill) { builder.AddBool(7, showBufficonGroundPassiveSkill, false); }
  public static void AddSuppliesConditionStringId(FlatBufferBuilder builder, StringOffset suppliesConditionStringIdOffset) { builder.AddOffset(8, suppliesConditionStringIdOffset.Value, 0); }
  public static void AddPublicSpeechBubbleOffsetX(FlatBufferBuilder builder, float publicSpeechBubbleOffsetX) { builder.AddFloat(9, publicSpeechBubbleOffsetX, 0.0f); }
  public static void AddPublicSpeechBubbleOffsetY(FlatBufferBuilder builder, float publicSpeechBubbleOffsetY) { builder.AddFloat(10, publicSpeechBubbleOffsetY, 0.0f); }
  public static void AddPublicSpeechBubbleOffsetZ(FlatBufferBuilder builder, float publicSpeechBubbleOffsetZ) { builder.AddFloat(11, publicSpeechBubbleOffsetZ, 0.0f); }
  public static void AddPublicSpeechDuration(FlatBufferBuilder builder, float publicSpeechDuration) { builder.AddFloat(12, publicSpeechDuration, 0.0f); }
  public static void AddShowRaidListCount(FlatBufferBuilder builder, int showRaidListCount) { builder.AddInt(13, showRaidListCount, 0); }
  public static void AddMaxRaidTicketCount(FlatBufferBuilder builder, long maxRaidTicketCount) { builder.AddLong(14, maxRaidTicketCount, 0); }
  public static void AddMaxRaidBossSkillSlot(FlatBufferBuilder builder, long maxRaidBossSkillSlot) { builder.AddLong(15, maxRaidBossSkillSlot, 0); }
  public static void AddEngageTimelinePath(FlatBufferBuilder builder, StringOffset engageTimelinePathOffset) { builder.AddOffset(16, engageTimelinePathOffset.Value, 0); }
  public static void AddEngageWithSupporterTimelinePath(FlatBufferBuilder builder, StringOffset engageWithSupporterTimelinePathOffset) { builder.AddOffset(17, engageWithSupporterTimelinePathOffset.Value, 0); }
  public static void AddVictoryTimelinePath(FlatBufferBuilder builder, StringOffset victoryTimelinePathOffset) { builder.AddOffset(18, victoryTimelinePathOffset.Value, 0); }
  public static void AddTimeLimitAlarm(FlatBufferBuilder builder, long timeLimitAlarm) { builder.AddLong(19, timeLimitAlarm, 0); }
  public static void AddEchelonMaxCommonCost(FlatBufferBuilder builder, int echelonMaxCommonCost) { builder.AddInt(20, echelonMaxCommonCost, 0); }
  public static void AddEchelonInitCommonCost(FlatBufferBuilder builder, int echelonInitCommonCost) { builder.AddInt(21, echelonInitCommonCost, 0); }
  public static void AddSkillSlotCoolTime(FlatBufferBuilder builder, long skillSlotCoolTime) { builder.AddLong(22, skillSlotCoolTime, 0); }
  public static void AddEnemyRegenCost(FlatBufferBuilder builder, long enemyRegenCost) { builder.AddLong(23, enemyRegenCost, 0); }
  public static void AddChampionRegenCost(FlatBufferBuilder builder, long championRegenCost) { builder.AddLong(24, championRegenCost, 0); }
  public static void AddPlayerRegenCostDelay(FlatBufferBuilder builder, long playerRegenCostDelay) { builder.AddLong(25, playerRegenCostDelay, 0); }
  public static void AddCrowdControlFactor(FlatBufferBuilder builder, long crowdControlFactor) { builder.AddLong(26, crowdControlFactor, 0); }
  public static void AddRaidOpenScenarioId(FlatBufferBuilder builder, StringOffset raidOpenScenarioIdOffset) { builder.AddOffset(27, raidOpenScenarioIdOffset.Value, 0); }
  public static void AddEliminateRaidOpenScenarioId(FlatBufferBuilder builder, StringOffset eliminateRaidOpenScenarioIdOffset) { builder.AddOffset(28, eliminateRaidOpenScenarioIdOffset.Value, 0); }
  public static void AddDefenceConstA(FlatBufferBuilder builder, long defenceConstA) { builder.AddLong(29, defenceConstA, 0); }
  public static void AddDefenceConstB(FlatBufferBuilder builder, long defenceConstB) { builder.AddLong(30, defenceConstB, 0); }
  public static void AddDefenceConstC(FlatBufferBuilder builder, long defenceConstC) { builder.AddLong(31, defenceConstC, 0); }
  public static void AddDefenceConstD(FlatBufferBuilder builder, long defenceConstD) { builder.AddLong(32, defenceConstD, 0); }
  public static void AddAccuracyConstA(FlatBufferBuilder builder, long accuracyConstA) { builder.AddLong(33, accuracyConstA, 0); }
  public static void AddAccuracyConstB(FlatBufferBuilder builder, long accuracyConstB) { builder.AddLong(34, accuracyConstB, 0); }
  public static void AddAccuracyConstC(FlatBufferBuilder builder, long accuracyConstC) { builder.AddLong(35, accuracyConstC, 0); }
  public static void AddAccuracyConstD(FlatBufferBuilder builder, long accuracyConstD) { builder.AddLong(36, accuracyConstD, 0); }
  public static void AddCriticalConstA(FlatBufferBuilder builder, long criticalConstA) { builder.AddLong(37, criticalConstA, 0); }
  public static void AddCriticalConstB(FlatBufferBuilder builder, long criticalConstB) { builder.AddLong(38, criticalConstB, 0); }
  public static void AddCriticalConstC(FlatBufferBuilder builder, long criticalConstC) { builder.AddLong(39, criticalConstC, 0); }
  public static void AddCriticalConstD(FlatBufferBuilder builder, long criticalConstD) { builder.AddLong(40, criticalConstD, 0); }
  public static void AddMaxGroupBuffLevel(FlatBufferBuilder builder, int maxGroupBuffLevel) { builder.AddInt(41, maxGroupBuffLevel, 0); }
  public static void AddEmojiDefaultTime(FlatBufferBuilder builder, int emojiDefaultTime) { builder.AddInt(42, emojiDefaultTime, 0); }
  public static void AddTimeLineActionRotateSpeed(FlatBufferBuilder builder, long timeLineActionRotateSpeed) { builder.AddLong(43, timeLineActionRotateSpeed, 0); }
  public static void AddBodyRotateSpeed(FlatBufferBuilder builder, long bodyRotateSpeed) { builder.AddLong(44, bodyRotateSpeed, 0); }
  public static void AddNormalTimeScale(FlatBufferBuilder builder, long normalTimeScale) { builder.AddLong(45, normalTimeScale, 0); }
  public static void AddFastTimeScale(FlatBufferBuilder builder, long fastTimeScale) { builder.AddLong(46, fastTimeScale, 0); }
  public static void AddBulletTimeScale(FlatBufferBuilder builder, long bulletTimeScale) { builder.AddLong(47, bulletTimeScale, 0); }
  public static void AddUIDisplayDelayAfterSkillCutIn(FlatBufferBuilder builder, long uIDisplayDelayAfterSkillCutIn) { builder.AddLong(48, uIDisplayDelayAfterSkillCutIn, 0); }
  public static void AddUseInitialRangeForCoverMove(FlatBufferBuilder builder, bool useInitialRangeForCoverMove) { builder.AddBool(49, useInitialRangeForCoverMove, false); }
  public static void AddSlowTimeScale(FlatBufferBuilder builder, long slowTimeScale) { builder.AddLong(50, slowTimeScale, 0); }
  public static void AddAimIKMinDegree(FlatBufferBuilder builder, float aimIKMinDegree) { builder.AddFloat(51, aimIKMinDegree, 0.0f); }
  public static void AddAimIKMaxDegree(FlatBufferBuilder builder, float aimIKMaxDegree) { builder.AddFloat(52, aimIKMaxDegree, 0.0f); }
  public static void AddMinimumClearTime(FlatBufferBuilder builder, int minimumClearTime) { builder.AddInt(53, minimumClearTime, 0); }
  public static void AddMinimumClearLevelGap(FlatBufferBuilder builder, int minimumClearLevelGap) { builder.AddInt(54, minimumClearLevelGap, 0); }
  public static void AddCheckCheaterMaxUseCostNonArena(FlatBufferBuilder builder, int checkCheaterMaxUseCostNonArena) { builder.AddInt(55, checkCheaterMaxUseCostNonArena, 0); }
  public static void AddCheckCheaterMaxUseCostArena(FlatBufferBuilder builder, int checkCheaterMaxUseCostArena) { builder.AddInt(56, checkCheaterMaxUseCostArena, 0); }
  public static void AddAllowedMaxTimeScale(FlatBufferBuilder builder, long allowedMaxTimeScale) { builder.AddLong(57, allowedMaxTimeScale, 0); }
  public static void AddRandomAnimationOutput(FlatBufferBuilder builder, long randomAnimationOutput) { builder.AddLong(58, randomAnimationOutput, 0); }
  public static void AddSummonedTeleportDistance(FlatBufferBuilder builder, long summonedTeleportDistance) { builder.AddLong(59, summonedTeleportDistance, 0); }
  public static void AddArenaMinimumClearTime(FlatBufferBuilder builder, int arenaMinimumClearTime) { builder.AddInt(60, arenaMinimumClearTime, 0); }
  public static void AddWORLDBOSSBATTLELITTLE(FlatBufferBuilder builder, long wORLDBOSSBATTLELITTLE) { builder.AddLong(61, wORLDBOSSBATTLELITTLE, 0); }
  public static void AddWORLDBOSSBATTLELITTLETw(FlatBufferBuilder builder, long wORLDBOSSBATTLELITTLETw) { builder.AddLong(62, wORLDBOSSBATTLELITTLETw, 0); }
  public static void AddWORLDBOSSBATTLELITTLEAsia(FlatBufferBuilder builder, long wORLDBOSSBATTLELITTLEAsia) { builder.AddLong(63, wORLDBOSSBATTLELITTLEAsia, 0); }
  public static void AddWORLDBOSSBATTLELITTLENa(FlatBufferBuilder builder, long wORLDBOSSBATTLELITTLENa) { builder.AddLong(64, wORLDBOSSBATTLELITTLENa, 0); }
  public static void AddWORLDBOSSBATTLELITTLEGlobal(FlatBufferBuilder builder, long wORLDBOSSBATTLELITTLEGlobal) { builder.AddLong(65, wORLDBOSSBATTLELITTLEGlobal, 0); }
  public static void AddWORLDBOSSBATTLEMIDDLE(FlatBufferBuilder builder, long wORLDBOSSBATTLEMIDDLE) { builder.AddLong(66, wORLDBOSSBATTLEMIDDLE, 0); }
  public static void AddWORLDBOSSBATTLEMIDDLETw(FlatBufferBuilder builder, long wORLDBOSSBATTLEMIDDLETw) { builder.AddLong(67, wORLDBOSSBATTLEMIDDLETw, 0); }
  public static void AddWORLDBOSSBATTLEMIDDLEAsia(FlatBufferBuilder builder, long wORLDBOSSBATTLEMIDDLEAsia) { builder.AddLong(68, wORLDBOSSBATTLEMIDDLEAsia, 0); }
  public static void AddWORLDBOSSBATTLEMIDDLENa(FlatBufferBuilder builder, long wORLDBOSSBATTLEMIDDLENa) { builder.AddLong(69, wORLDBOSSBATTLEMIDDLENa, 0); }
  public static void AddWORLDBOSSBATTLEMIDDLEGlobal(FlatBufferBuilder builder, long wORLDBOSSBATTLEMIDDLEGlobal) { builder.AddLong(70, wORLDBOSSBATTLEMIDDLEGlobal, 0); }
  public static void AddWORLDBOSSBATTLEHIGH(FlatBufferBuilder builder, long wORLDBOSSBATTLEHIGH) { builder.AddLong(71, wORLDBOSSBATTLEHIGH, 0); }
  public static void AddWORLDBOSSBATTLEHIGHTw(FlatBufferBuilder builder, long wORLDBOSSBATTLEHIGHTw) { builder.AddLong(72, wORLDBOSSBATTLEHIGHTw, 0); }
  public static void AddWORLDBOSSBATTLEHIGHAsia(FlatBufferBuilder builder, long wORLDBOSSBATTLEHIGHAsia) { builder.AddLong(73, wORLDBOSSBATTLEHIGHAsia, 0); }
  public static void AddWORLDBOSSBATTLEHIGHNa(FlatBufferBuilder builder, long wORLDBOSSBATTLEHIGHNa) { builder.AddLong(74, wORLDBOSSBATTLEHIGHNa, 0); }
  public static void AddWORLDBOSSBATTLEHIGHGlobal(FlatBufferBuilder builder, long wORLDBOSSBATTLEHIGHGlobal) { builder.AddLong(75, wORLDBOSSBATTLEHIGHGlobal, 0); }
  public static void AddWORLDBOSSBATTLEVERYHIGH(FlatBufferBuilder builder, long wORLDBOSSBATTLEVERYHIGH) { builder.AddLong(76, wORLDBOSSBATTLEVERYHIGH, 0); }
  public static void AddWORLDBOSSBATTLEVERYHIGHTw(FlatBufferBuilder builder, long wORLDBOSSBATTLEVERYHIGHTw) { builder.AddLong(77, wORLDBOSSBATTLEVERYHIGHTw, 0); }
  public static void AddWORLDBOSSBATTLEVERYHIGHAsia(FlatBufferBuilder builder, long wORLDBOSSBATTLEVERYHIGHAsia) { builder.AddLong(78, wORLDBOSSBATTLEVERYHIGHAsia, 0); }
  public static void AddWORLDBOSSBATTLEVERYHIGHNa(FlatBufferBuilder builder, long wORLDBOSSBATTLEVERYHIGHNa) { builder.AddLong(79, wORLDBOSSBATTLEVERYHIGHNa, 0); }
  public static void AddWORLDBOSSBATTLEVERYHIGHGlobal(FlatBufferBuilder builder, long wORLDBOSSBATTLEVERYHIGHGlobal) { builder.AddLong(80, wORLDBOSSBATTLEVERYHIGHGlobal, 0); }
  public static void AddWorldRaidAutoSyncTermSecond(FlatBufferBuilder builder, long worldRaidAutoSyncTermSecond) { builder.AddLong(81, worldRaidAutoSyncTermSecond, 0); }
  public static void AddWorldRaidBossHpDecreaseTerm(FlatBufferBuilder builder, long worldRaidBossHpDecreaseTerm) { builder.AddLong(82, worldRaidBossHpDecreaseTerm, 0); }
  public static void AddWorldRaidBossParcelReactionDelay(FlatBufferBuilder builder, long worldRaidBossParcelReactionDelay) { builder.AddLong(83, worldRaidBossParcelReactionDelay, 0); }
  public static void AddRaidRankingJumpMinimumWaitingTime(FlatBufferBuilder builder, long raidRankingJumpMinimumWaitingTime) { builder.AddLong(84, raidRankingJumpMinimumWaitingTime, 0); }
  public static void AddEffectTeleportDistance(FlatBufferBuilder builder, float effectTeleportDistance) { builder.AddFloat(85, effectTeleportDistance, 0.0f); }
  public static void AddAuraExitThresholdMargin(FlatBufferBuilder builder, long auraExitThresholdMargin) { builder.AddLong(86, auraExitThresholdMargin, 0); }
  public static void AddTSAInteractionDamageFactor(FlatBufferBuilder builder, long tSAInteractionDamageFactor) { builder.AddLong(87, tSAInteractionDamageFactor, 0); }
  public static void AddVictoryInteractionRate(FlatBufferBuilder builder, long victoryInteractionRate) { builder.AddLong(88, victoryInteractionRate, 0); }
  public static void AddEchelonExtensionEngageTimelinePath(FlatBufferBuilder builder, StringOffset echelonExtensionEngageTimelinePathOffset) { builder.AddOffset(89, echelonExtensionEngageTimelinePathOffset.Value, 0); }
  public static void AddEchelonExtensionEngageWithSupporterTimelinePath(FlatBufferBuilder builder, StringOffset echelonExtensionEngageWithSupporterTimelinePathOffset) { builder.AddOffset(90, echelonExtensionEngageWithSupporterTimelinePathOffset.Value, 0); }
  public static void AddEchelonExtensionVictoryTimelinePath(FlatBufferBuilder builder, StringOffset echelonExtensionVictoryTimelinePathOffset) { builder.AddOffset(91, echelonExtensionVictoryTimelinePathOffset.Value, 0); }
  public static void AddEchelonExtensionEchelonMaxCommonCost(FlatBufferBuilder builder, int echelonExtensionEchelonMaxCommonCost) { builder.AddInt(92, echelonExtensionEchelonMaxCommonCost, 0); }
  public static void AddEchelonExtensionEchelonInitCommonCost(FlatBufferBuilder builder, int echelonExtensionEchelonInitCommonCost) { builder.AddInt(93, echelonExtensionEchelonInitCommonCost, 0); }
  public static void AddEchelonExtensionCostRegenRatio(FlatBufferBuilder builder, long echelonExtensionCostRegenRatio) { builder.AddLong(94, echelonExtensionCostRegenRatio, 0); }
  public static void AddCheckCheaterMaxUseCostMultiFloorRaid(FlatBufferBuilder builder, int checkCheaterMaxUseCostMultiFloorRaid) { builder.AddInt(95, checkCheaterMaxUseCostMultiFloorRaid, 0); }
  public static Offset<Plana.FlatData.ConstCombatExcel> EndConstCombatExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.ConstCombatExcel>(o);
  }
  public ConstCombatExcelT UnPack() {
    var _o = new ConstCombatExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConstCombatExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("ConstCombat");
    _o.SkillHandCount = TableEncryptionService.Convert(this.SkillHandCount, key);
    _o.DyingTime = TableEncryptionService.Convert(this.DyingTime, key);
    _o.BuffIconBlinkTime = TableEncryptionService.Convert(this.BuffIconBlinkTime, key);
    _o.ShowBufficonEXSkill = TableEncryptionService.Convert(this.ShowBufficonEXSkill, key);
    _o.ShowBufficonPassiveSkill = TableEncryptionService.Convert(this.ShowBufficonPassiveSkill, key);
    _o.ShowBufficonExtraPassiveSkill = TableEncryptionService.Convert(this.ShowBufficonExtraPassiveSkill, key);
    _o.ShowBufficonLeaderSkill = TableEncryptionService.Convert(this.ShowBufficonLeaderSkill, key);
    _o.ShowBufficonGroundPassiveSkill = TableEncryptionService.Convert(this.ShowBufficonGroundPassiveSkill, key);
    _o.SuppliesConditionStringId = TableEncryptionService.Convert(this.SuppliesConditionStringId, key);
    _o.PublicSpeechBubbleOffsetX = TableEncryptionService.Convert(this.PublicSpeechBubbleOffsetX, key);
    _o.PublicSpeechBubbleOffsetY = TableEncryptionService.Convert(this.PublicSpeechBubbleOffsetY, key);
    _o.PublicSpeechBubbleOffsetZ = TableEncryptionService.Convert(this.PublicSpeechBubbleOffsetZ, key);
    _o.PublicSpeechDuration = TableEncryptionService.Convert(this.PublicSpeechDuration, key);
    _o.ShowRaidListCount = TableEncryptionService.Convert(this.ShowRaidListCount, key);
    _o.MaxRaidTicketCount = TableEncryptionService.Convert(this.MaxRaidTicketCount, key);
    _o.MaxRaidBossSkillSlot = TableEncryptionService.Convert(this.MaxRaidBossSkillSlot, key);
    _o.EngageTimelinePath = TableEncryptionService.Convert(this.EngageTimelinePath, key);
    _o.EngageWithSupporterTimelinePath = TableEncryptionService.Convert(this.EngageWithSupporterTimelinePath, key);
    _o.VictoryTimelinePath = TableEncryptionService.Convert(this.VictoryTimelinePath, key);
    _o.TimeLimitAlarm = TableEncryptionService.Convert(this.TimeLimitAlarm, key);
    _o.EchelonMaxCommonCost = TableEncryptionService.Convert(this.EchelonMaxCommonCost, key);
    _o.EchelonInitCommonCost = TableEncryptionService.Convert(this.EchelonInitCommonCost, key);
    _o.SkillSlotCoolTime = TableEncryptionService.Convert(this.SkillSlotCoolTime, key);
    _o.EnemyRegenCost = TableEncryptionService.Convert(this.EnemyRegenCost, key);
    _o.ChampionRegenCost = TableEncryptionService.Convert(this.ChampionRegenCost, key);
    _o.PlayerRegenCostDelay = TableEncryptionService.Convert(this.PlayerRegenCostDelay, key);
    _o.CrowdControlFactor = TableEncryptionService.Convert(this.CrowdControlFactor, key);
    _o.RaidOpenScenarioId = TableEncryptionService.Convert(this.RaidOpenScenarioId, key);
    _o.EliminateRaidOpenScenarioId = TableEncryptionService.Convert(this.EliminateRaidOpenScenarioId, key);
    _o.DefenceConstA = TableEncryptionService.Convert(this.DefenceConstA, key);
    _o.DefenceConstB = TableEncryptionService.Convert(this.DefenceConstB, key);
    _o.DefenceConstC = TableEncryptionService.Convert(this.DefenceConstC, key);
    _o.DefenceConstD = TableEncryptionService.Convert(this.DefenceConstD, key);
    _o.AccuracyConstA = TableEncryptionService.Convert(this.AccuracyConstA, key);
    _o.AccuracyConstB = TableEncryptionService.Convert(this.AccuracyConstB, key);
    _o.AccuracyConstC = TableEncryptionService.Convert(this.AccuracyConstC, key);
    _o.AccuracyConstD = TableEncryptionService.Convert(this.AccuracyConstD, key);
    _o.CriticalConstA = TableEncryptionService.Convert(this.CriticalConstA, key);
    _o.CriticalConstB = TableEncryptionService.Convert(this.CriticalConstB, key);
    _o.CriticalConstC = TableEncryptionService.Convert(this.CriticalConstC, key);
    _o.CriticalConstD = TableEncryptionService.Convert(this.CriticalConstD, key);
    _o.MaxGroupBuffLevel = TableEncryptionService.Convert(this.MaxGroupBuffLevel, key);
    _o.EmojiDefaultTime = TableEncryptionService.Convert(this.EmojiDefaultTime, key);
    _o.TimeLineActionRotateSpeed = TableEncryptionService.Convert(this.TimeLineActionRotateSpeed, key);
    _o.BodyRotateSpeed = TableEncryptionService.Convert(this.BodyRotateSpeed, key);
    _o.NormalTimeScale = TableEncryptionService.Convert(this.NormalTimeScale, key);
    _o.FastTimeScale = TableEncryptionService.Convert(this.FastTimeScale, key);
    _o.BulletTimeScale = TableEncryptionService.Convert(this.BulletTimeScale, key);
    _o.UIDisplayDelayAfterSkillCutIn = TableEncryptionService.Convert(this.UIDisplayDelayAfterSkillCutIn, key);
    _o.UseInitialRangeForCoverMove = TableEncryptionService.Convert(this.UseInitialRangeForCoverMove, key);
    _o.SlowTimeScale = TableEncryptionService.Convert(this.SlowTimeScale, key);
    _o.AimIKMinDegree = TableEncryptionService.Convert(this.AimIKMinDegree, key);
    _o.AimIKMaxDegree = TableEncryptionService.Convert(this.AimIKMaxDegree, key);
    _o.MinimumClearTime = TableEncryptionService.Convert(this.MinimumClearTime, key);
    _o.MinimumClearLevelGap = TableEncryptionService.Convert(this.MinimumClearLevelGap, key);
    _o.CheckCheaterMaxUseCostNonArena = TableEncryptionService.Convert(this.CheckCheaterMaxUseCostNonArena, key);
    _o.CheckCheaterMaxUseCostArena = TableEncryptionService.Convert(this.CheckCheaterMaxUseCostArena, key);
    _o.AllowedMaxTimeScale = TableEncryptionService.Convert(this.AllowedMaxTimeScale, key);
    _o.RandomAnimationOutput = TableEncryptionService.Convert(this.RandomAnimationOutput, key);
    _o.SummonedTeleportDistance = TableEncryptionService.Convert(this.SummonedTeleportDistance, key);
    _o.ArenaMinimumClearTime = TableEncryptionService.Convert(this.ArenaMinimumClearTime, key);
    _o.WORLDBOSSBATTLELITTLE = TableEncryptionService.Convert(this.WORLDBOSSBATTLELITTLE, key);
    _o.WORLDBOSSBATTLELITTLETw = TableEncryptionService.Convert(this.WORLDBOSSBATTLELITTLETw, key);
    _o.WORLDBOSSBATTLELITTLEAsia = TableEncryptionService.Convert(this.WORLDBOSSBATTLELITTLEAsia, key);
    _o.WORLDBOSSBATTLELITTLENa = TableEncryptionService.Convert(this.WORLDBOSSBATTLELITTLENa, key);
    _o.WORLDBOSSBATTLELITTLEGlobal = TableEncryptionService.Convert(this.WORLDBOSSBATTLELITTLEGlobal, key);
    _o.WORLDBOSSBATTLEMIDDLE = TableEncryptionService.Convert(this.WORLDBOSSBATTLEMIDDLE, key);
    _o.WORLDBOSSBATTLEMIDDLETw = TableEncryptionService.Convert(this.WORLDBOSSBATTLEMIDDLETw, key);
    _o.WORLDBOSSBATTLEMIDDLEAsia = TableEncryptionService.Convert(this.WORLDBOSSBATTLEMIDDLEAsia, key);
    _o.WORLDBOSSBATTLEMIDDLENa = TableEncryptionService.Convert(this.WORLDBOSSBATTLEMIDDLENa, key);
    _o.WORLDBOSSBATTLEMIDDLEGlobal = TableEncryptionService.Convert(this.WORLDBOSSBATTLEMIDDLEGlobal, key);
    _o.WORLDBOSSBATTLEHIGH = TableEncryptionService.Convert(this.WORLDBOSSBATTLEHIGH, key);
    _o.WORLDBOSSBATTLEHIGHTw = TableEncryptionService.Convert(this.WORLDBOSSBATTLEHIGHTw, key);
    _o.WORLDBOSSBATTLEHIGHAsia = TableEncryptionService.Convert(this.WORLDBOSSBATTLEHIGHAsia, key);
    _o.WORLDBOSSBATTLEHIGHNa = TableEncryptionService.Convert(this.WORLDBOSSBATTLEHIGHNa, key);
    _o.WORLDBOSSBATTLEHIGHGlobal = TableEncryptionService.Convert(this.WORLDBOSSBATTLEHIGHGlobal, key);
    _o.WORLDBOSSBATTLEVERYHIGH = TableEncryptionService.Convert(this.WORLDBOSSBATTLEVERYHIGH, key);
    _o.WORLDBOSSBATTLEVERYHIGHTw = TableEncryptionService.Convert(this.WORLDBOSSBATTLEVERYHIGHTw, key);
    _o.WORLDBOSSBATTLEVERYHIGHAsia = TableEncryptionService.Convert(this.WORLDBOSSBATTLEVERYHIGHAsia, key);
    _o.WORLDBOSSBATTLEVERYHIGHNa = TableEncryptionService.Convert(this.WORLDBOSSBATTLEVERYHIGHNa, key);
    _o.WORLDBOSSBATTLEVERYHIGHGlobal = TableEncryptionService.Convert(this.WORLDBOSSBATTLEVERYHIGHGlobal, key);
    _o.WorldRaidAutoSyncTermSecond = TableEncryptionService.Convert(this.WorldRaidAutoSyncTermSecond, key);
    _o.WorldRaidBossHpDecreaseTerm = TableEncryptionService.Convert(this.WorldRaidBossHpDecreaseTerm, key);
    _o.WorldRaidBossParcelReactionDelay = TableEncryptionService.Convert(this.WorldRaidBossParcelReactionDelay, key);
    _o.RaidRankingJumpMinimumWaitingTime = TableEncryptionService.Convert(this.RaidRankingJumpMinimumWaitingTime, key);
    _o.EffectTeleportDistance = TableEncryptionService.Convert(this.EffectTeleportDistance, key);
    _o.AuraExitThresholdMargin = TableEncryptionService.Convert(this.AuraExitThresholdMargin, key);
    _o.TSAInteractionDamageFactor = TableEncryptionService.Convert(this.TSAInteractionDamageFactor, key);
    _o.VictoryInteractionRate = TableEncryptionService.Convert(this.VictoryInteractionRate, key);
    _o.EchelonExtensionEngageTimelinePath = TableEncryptionService.Convert(this.EchelonExtensionEngageTimelinePath, key);
    _o.EchelonExtensionEngageWithSupporterTimelinePath = TableEncryptionService.Convert(this.EchelonExtensionEngageWithSupporterTimelinePath, key);
    _o.EchelonExtensionVictoryTimelinePath = TableEncryptionService.Convert(this.EchelonExtensionVictoryTimelinePath, key);
    _o.EchelonExtensionEchelonMaxCommonCost = TableEncryptionService.Convert(this.EchelonExtensionEchelonMaxCommonCost, key);
    _o.EchelonExtensionEchelonInitCommonCost = TableEncryptionService.Convert(this.EchelonExtensionEchelonInitCommonCost, key);
    _o.EchelonExtensionCostRegenRatio = TableEncryptionService.Convert(this.EchelonExtensionCostRegenRatio, key);
    _o.CheckCheaterMaxUseCostMultiFloorRaid = TableEncryptionService.Convert(this.CheckCheaterMaxUseCostMultiFloorRaid, key);
  }
  public static Offset<Plana.FlatData.ConstCombatExcel> Pack(FlatBufferBuilder builder, ConstCombatExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.ConstCombatExcel>);
    var _SuppliesConditionStringId = _o.SuppliesConditionStringId == null ? default(StringOffset) : builder.CreateString(_o.SuppliesConditionStringId);
    var _EngageTimelinePath = _o.EngageTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.EngageTimelinePath);
    var _EngageWithSupporterTimelinePath = _o.EngageWithSupporterTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.EngageWithSupporterTimelinePath);
    var _VictoryTimelinePath = _o.VictoryTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.VictoryTimelinePath);
    var _RaidOpenScenarioId = _o.RaidOpenScenarioId == null ? default(StringOffset) : builder.CreateString(_o.RaidOpenScenarioId);
    var _EliminateRaidOpenScenarioId = _o.EliminateRaidOpenScenarioId == null ? default(StringOffset) : builder.CreateString(_o.EliminateRaidOpenScenarioId);
    var _EchelonExtensionEngageTimelinePath = _o.EchelonExtensionEngageTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.EchelonExtensionEngageTimelinePath);
    var _EchelonExtensionEngageWithSupporterTimelinePath = _o.EchelonExtensionEngageWithSupporterTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.EchelonExtensionEngageWithSupporterTimelinePath);
    var _EchelonExtensionVictoryTimelinePath = _o.EchelonExtensionVictoryTimelinePath == null ? default(StringOffset) : builder.CreateString(_o.EchelonExtensionVictoryTimelinePath);
    return CreateConstCombatExcel(
      builder,
      _o.SkillHandCount,
      _o.DyingTime,
      _o.BuffIconBlinkTime,
      _o.ShowBufficonEXSkill,
      _o.ShowBufficonPassiveSkill,
      _o.ShowBufficonExtraPassiveSkill,
      _o.ShowBufficonLeaderSkill,
      _o.ShowBufficonGroundPassiveSkill,
      _SuppliesConditionStringId,
      _o.PublicSpeechBubbleOffsetX,
      _o.PublicSpeechBubbleOffsetY,
      _o.PublicSpeechBubbleOffsetZ,
      _o.PublicSpeechDuration,
      _o.ShowRaidListCount,
      _o.MaxRaidTicketCount,
      _o.MaxRaidBossSkillSlot,
      _EngageTimelinePath,
      _EngageWithSupporterTimelinePath,
      _VictoryTimelinePath,
      _o.TimeLimitAlarm,
      _o.EchelonMaxCommonCost,
      _o.EchelonInitCommonCost,
      _o.SkillSlotCoolTime,
      _o.EnemyRegenCost,
      _o.ChampionRegenCost,
      _o.PlayerRegenCostDelay,
      _o.CrowdControlFactor,
      _RaidOpenScenarioId,
      _EliminateRaidOpenScenarioId,
      _o.DefenceConstA,
      _o.DefenceConstB,
      _o.DefenceConstC,
      _o.DefenceConstD,
      _o.AccuracyConstA,
      _o.AccuracyConstB,
      _o.AccuracyConstC,
      _o.AccuracyConstD,
      _o.CriticalConstA,
      _o.CriticalConstB,
      _o.CriticalConstC,
      _o.CriticalConstD,
      _o.MaxGroupBuffLevel,
      _o.EmojiDefaultTime,
      _o.TimeLineActionRotateSpeed,
      _o.BodyRotateSpeed,
      _o.NormalTimeScale,
      _o.FastTimeScale,
      _o.BulletTimeScale,
      _o.UIDisplayDelayAfterSkillCutIn,
      _o.UseInitialRangeForCoverMove,
      _o.SlowTimeScale,
      _o.AimIKMinDegree,
      _o.AimIKMaxDegree,
      _o.MinimumClearTime,
      _o.MinimumClearLevelGap,
      _o.CheckCheaterMaxUseCostNonArena,
      _o.CheckCheaterMaxUseCostArena,
      _o.AllowedMaxTimeScale,
      _o.RandomAnimationOutput,
      _o.SummonedTeleportDistance,
      _o.ArenaMinimumClearTime,
      _o.WORLDBOSSBATTLELITTLE,
      _o.WORLDBOSSBATTLELITTLETw,
      _o.WORLDBOSSBATTLELITTLEAsia,
      _o.WORLDBOSSBATTLELITTLENa,
      _o.WORLDBOSSBATTLELITTLEGlobal,
      _o.WORLDBOSSBATTLEMIDDLE,
      _o.WORLDBOSSBATTLEMIDDLETw,
      _o.WORLDBOSSBATTLEMIDDLEAsia,
      _o.WORLDBOSSBATTLEMIDDLENa,
      _o.WORLDBOSSBATTLEMIDDLEGlobal,
      _o.WORLDBOSSBATTLEHIGH,
      _o.WORLDBOSSBATTLEHIGHTw,
      _o.WORLDBOSSBATTLEHIGHAsia,
      _o.WORLDBOSSBATTLEHIGHNa,
      _o.WORLDBOSSBATTLEHIGHGlobal,
      _o.WORLDBOSSBATTLEVERYHIGH,
      _o.WORLDBOSSBATTLEVERYHIGHTw,
      _o.WORLDBOSSBATTLEVERYHIGHAsia,
      _o.WORLDBOSSBATTLEVERYHIGHNa,
      _o.WORLDBOSSBATTLEVERYHIGHGlobal,
      _o.WorldRaidAutoSyncTermSecond,
      _o.WorldRaidBossHpDecreaseTerm,
      _o.WorldRaidBossParcelReactionDelay,
      _o.RaidRankingJumpMinimumWaitingTime,
      _o.EffectTeleportDistance,
      _o.AuraExitThresholdMargin,
      _o.TSAInteractionDamageFactor,
      _o.VictoryInteractionRate,
      _EchelonExtensionEngageTimelinePath,
      _EchelonExtensionEngageWithSupporterTimelinePath,
      _EchelonExtensionVictoryTimelinePath,
      _o.EchelonExtensionEchelonMaxCommonCost,
      _o.EchelonExtensionEchelonInitCommonCost,
      _o.EchelonExtensionCostRegenRatio,
      _o.CheckCheaterMaxUseCostMultiFloorRaid);
  }
}

public class ConstCombatExcelT
{
  public int SkillHandCount { get; set; }
  public int DyingTime { get; set; }
  public int BuffIconBlinkTime { get; set; }
  public bool ShowBufficonEXSkill { get; set; }
  public bool ShowBufficonPassiveSkill { get; set; }
  public bool ShowBufficonExtraPassiveSkill { get; set; }
  public bool ShowBufficonLeaderSkill { get; set; }
  public bool ShowBufficonGroundPassiveSkill { get; set; }
  public string SuppliesConditionStringId { get; set; }
  public float PublicSpeechBubbleOffsetX { get; set; }
  public float PublicSpeechBubbleOffsetY { get; set; }
  public float PublicSpeechBubbleOffsetZ { get; set; }
  public float PublicSpeechDuration { get; set; }
  public int ShowRaidListCount { get; set; }
  public long MaxRaidTicketCount { get; set; }
  public long MaxRaidBossSkillSlot { get; set; }
  public string EngageTimelinePath { get; set; }
  public string EngageWithSupporterTimelinePath { get; set; }
  public string VictoryTimelinePath { get; set; }
  public long TimeLimitAlarm { get; set; }
  public int EchelonMaxCommonCost { get; set; }
  public int EchelonInitCommonCost { get; set; }
  public long SkillSlotCoolTime { get; set; }
  public long EnemyRegenCost { get; set; }
  public long ChampionRegenCost { get; set; }
  public long PlayerRegenCostDelay { get; set; }
  public long CrowdControlFactor { get; set; }
  public string RaidOpenScenarioId { get; set; }
  public string EliminateRaidOpenScenarioId { get; set; }
  public long DefenceConstA { get; set; }
  public long DefenceConstB { get; set; }
  public long DefenceConstC { get; set; }
  public long DefenceConstD { get; set; }
  public long AccuracyConstA { get; set; }
  public long AccuracyConstB { get; set; }
  public long AccuracyConstC { get; set; }
  public long AccuracyConstD { get; set; }
  public long CriticalConstA { get; set; }
  public long CriticalConstB { get; set; }
  public long CriticalConstC { get; set; }
  public long CriticalConstD { get; set; }
  public int MaxGroupBuffLevel { get; set; }
  public int EmojiDefaultTime { get; set; }
  public long TimeLineActionRotateSpeed { get; set; }
  public long BodyRotateSpeed { get; set; }
  public long NormalTimeScale { get; set; }
  public long FastTimeScale { get; set; }
  public long BulletTimeScale { get; set; }
  public long UIDisplayDelayAfterSkillCutIn { get; set; }
  public bool UseInitialRangeForCoverMove { get; set; }
  public long SlowTimeScale { get; set; }
  public float AimIKMinDegree { get; set; }
  public float AimIKMaxDegree { get; set; }
  public int MinimumClearTime { get; set; }
  public int MinimumClearLevelGap { get; set; }
  public int CheckCheaterMaxUseCostNonArena { get; set; }
  public int CheckCheaterMaxUseCostArena { get; set; }
  public long AllowedMaxTimeScale { get; set; }
  public long RandomAnimationOutput { get; set; }
  public long SummonedTeleportDistance { get; set; }
  public int ArenaMinimumClearTime { get; set; }
  public long WORLDBOSSBATTLELITTLE { get; set; }
  public long WORLDBOSSBATTLELITTLETw { get; set; }
  public long WORLDBOSSBATTLELITTLEAsia { get; set; }
  public long WORLDBOSSBATTLELITTLENa { get; set; }
  public long WORLDBOSSBATTLELITTLEGlobal { get; set; }
  public long WORLDBOSSBATTLEMIDDLE { get; set; }
  public long WORLDBOSSBATTLEMIDDLETw { get; set; }
  public long WORLDBOSSBATTLEMIDDLEAsia { get; set; }
  public long WORLDBOSSBATTLEMIDDLENa { get; set; }
  public long WORLDBOSSBATTLEMIDDLEGlobal { get; set; }
  public long WORLDBOSSBATTLEHIGH { get; set; }
  public long WORLDBOSSBATTLEHIGHTw { get; set; }
  public long WORLDBOSSBATTLEHIGHAsia { get; set; }
  public long WORLDBOSSBATTLEHIGHNa { get; set; }
  public long WORLDBOSSBATTLEHIGHGlobal { get; set; }
  public long WORLDBOSSBATTLEVERYHIGH { get; set; }
  public long WORLDBOSSBATTLEVERYHIGHTw { get; set; }
  public long WORLDBOSSBATTLEVERYHIGHAsia { get; set; }
  public long WORLDBOSSBATTLEVERYHIGHNa { get; set; }
  public long WORLDBOSSBATTLEVERYHIGHGlobal { get; set; }
  public long WorldRaidAutoSyncTermSecond { get; set; }
  public long WorldRaidBossHpDecreaseTerm { get; set; }
  public long WorldRaidBossParcelReactionDelay { get; set; }
  public long RaidRankingJumpMinimumWaitingTime { get; set; }
  public float EffectTeleportDistance { get; set; }
  public long AuraExitThresholdMargin { get; set; }
  public long TSAInteractionDamageFactor { get; set; }
  public long VictoryInteractionRate { get; set; }
  public string EchelonExtensionEngageTimelinePath { get; set; }
  public string EchelonExtensionEngageWithSupporterTimelinePath { get; set; }
  public string EchelonExtensionVictoryTimelinePath { get; set; }
  public int EchelonExtensionEchelonMaxCommonCost { get; set; }
  public int EchelonExtensionEchelonInitCommonCost { get; set; }
  public long EchelonExtensionCostRegenRatio { get; set; }
  public int CheckCheaterMaxUseCostMultiFloorRaid { get; set; }

  public ConstCombatExcelT() {
    this.SkillHandCount = 0;
    this.DyingTime = 0;
    this.BuffIconBlinkTime = 0;
    this.ShowBufficonEXSkill = false;
    this.ShowBufficonPassiveSkill = false;
    this.ShowBufficonExtraPassiveSkill = false;
    this.ShowBufficonLeaderSkill = false;
    this.ShowBufficonGroundPassiveSkill = false;
    this.SuppliesConditionStringId = null;
    this.PublicSpeechBubbleOffsetX = 0.0f;
    this.PublicSpeechBubbleOffsetY = 0.0f;
    this.PublicSpeechBubbleOffsetZ = 0.0f;
    this.PublicSpeechDuration = 0.0f;
    this.ShowRaidListCount = 0;
    this.MaxRaidTicketCount = 0;
    this.MaxRaidBossSkillSlot = 0;
    this.EngageTimelinePath = null;
    this.EngageWithSupporterTimelinePath = null;
    this.VictoryTimelinePath = null;
    this.TimeLimitAlarm = 0;
    this.EchelonMaxCommonCost = 0;
    this.EchelonInitCommonCost = 0;
    this.SkillSlotCoolTime = 0;
    this.EnemyRegenCost = 0;
    this.ChampionRegenCost = 0;
    this.PlayerRegenCostDelay = 0;
    this.CrowdControlFactor = 0;
    this.RaidOpenScenarioId = null;
    this.EliminateRaidOpenScenarioId = null;
    this.DefenceConstA = 0;
    this.DefenceConstB = 0;
    this.DefenceConstC = 0;
    this.DefenceConstD = 0;
    this.AccuracyConstA = 0;
    this.AccuracyConstB = 0;
    this.AccuracyConstC = 0;
    this.AccuracyConstD = 0;
    this.CriticalConstA = 0;
    this.CriticalConstB = 0;
    this.CriticalConstC = 0;
    this.CriticalConstD = 0;
    this.MaxGroupBuffLevel = 0;
    this.EmojiDefaultTime = 0;
    this.TimeLineActionRotateSpeed = 0;
    this.BodyRotateSpeed = 0;
    this.NormalTimeScale = 0;
    this.FastTimeScale = 0;
    this.BulletTimeScale = 0;
    this.UIDisplayDelayAfterSkillCutIn = 0;
    this.UseInitialRangeForCoverMove = false;
    this.SlowTimeScale = 0;
    this.AimIKMinDegree = 0.0f;
    this.AimIKMaxDegree = 0.0f;
    this.MinimumClearTime = 0;
    this.MinimumClearLevelGap = 0;
    this.CheckCheaterMaxUseCostNonArena = 0;
    this.CheckCheaterMaxUseCostArena = 0;
    this.AllowedMaxTimeScale = 0;
    this.RandomAnimationOutput = 0;
    this.SummonedTeleportDistance = 0;
    this.ArenaMinimumClearTime = 0;
    this.WORLDBOSSBATTLELITTLE = 0;
    this.WORLDBOSSBATTLELITTLETw = 0;
    this.WORLDBOSSBATTLELITTLEAsia = 0;
    this.WORLDBOSSBATTLELITTLENa = 0;
    this.WORLDBOSSBATTLELITTLEGlobal = 0;
    this.WORLDBOSSBATTLEMIDDLE = 0;
    this.WORLDBOSSBATTLEMIDDLETw = 0;
    this.WORLDBOSSBATTLEMIDDLEAsia = 0;
    this.WORLDBOSSBATTLEMIDDLENa = 0;
    this.WORLDBOSSBATTLEMIDDLEGlobal = 0;
    this.WORLDBOSSBATTLEHIGH = 0;
    this.WORLDBOSSBATTLEHIGHTw = 0;
    this.WORLDBOSSBATTLEHIGHAsia = 0;
    this.WORLDBOSSBATTLEHIGHNa = 0;
    this.WORLDBOSSBATTLEHIGHGlobal = 0;
    this.WORLDBOSSBATTLEVERYHIGH = 0;
    this.WORLDBOSSBATTLEVERYHIGHTw = 0;
    this.WORLDBOSSBATTLEVERYHIGHAsia = 0;
    this.WORLDBOSSBATTLEVERYHIGHNa = 0;
    this.WORLDBOSSBATTLEVERYHIGHGlobal = 0;
    this.WorldRaidAutoSyncTermSecond = 0;
    this.WorldRaidBossHpDecreaseTerm = 0;
    this.WorldRaidBossParcelReactionDelay = 0;
    this.RaidRankingJumpMinimumWaitingTime = 0;
    this.EffectTeleportDistance = 0.0f;
    this.AuraExitThresholdMargin = 0;
    this.TSAInteractionDamageFactor = 0;
    this.VictoryInteractionRate = 0;
    this.EchelonExtensionEngageTimelinePath = null;
    this.EchelonExtensionEngageWithSupporterTimelinePath = null;
    this.EchelonExtensionVictoryTimelinePath = null;
    this.EchelonExtensionEchelonMaxCommonCost = 0;
    this.EchelonExtensionEchelonInitCommonCost = 0;
    this.EchelonExtensionCostRegenRatio = 0;
    this.CheckCheaterMaxUseCostMultiFloorRaid = 0;
  }
}


static public class ConstCombatExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SkillHandCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*DyingTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*BuffIconBlinkTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*ShowBufficonEXSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*ShowBufficonPassiveSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*ShowBufficonExtraPassiveSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*ShowBufficonLeaderSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*ShowBufficonGroundPassiveSkill*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 20 /*SuppliesConditionStringId*/, false)
      && verifier.VerifyField(tablePos, 22 /*PublicSpeechBubbleOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*PublicSpeechBubbleOffsetY*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 26 /*PublicSpeechBubbleOffsetZ*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 28 /*PublicSpeechDuration*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 30 /*ShowRaidListCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 32 /*MaxRaidTicketCount*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 34 /*MaxRaidBossSkillSlot*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 36 /*EngageTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 38 /*EngageWithSupporterTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 40 /*VictoryTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 42 /*TimeLimitAlarm*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 44 /*EchelonMaxCommonCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 46 /*EchelonInitCommonCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 48 /*SkillSlotCoolTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 50 /*EnemyRegenCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 52 /*ChampionRegenCost*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 54 /*PlayerRegenCostDelay*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 56 /*CrowdControlFactor*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 58 /*RaidOpenScenarioId*/, false)
      && verifier.VerifyString(tablePos, 60 /*EliminateRaidOpenScenarioId*/, false)
      && verifier.VerifyField(tablePos, 62 /*DefenceConstA*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 64 /*DefenceConstB*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 66 /*DefenceConstC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 68 /*DefenceConstD*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 70 /*AccuracyConstA*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 72 /*AccuracyConstB*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 74 /*AccuracyConstC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 76 /*AccuracyConstD*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 78 /*CriticalConstA*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 80 /*CriticalConstB*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 82 /*CriticalConstC*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 84 /*CriticalConstD*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 86 /*MaxGroupBuffLevel*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 88 /*EmojiDefaultTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 90 /*TimeLineActionRotateSpeed*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 92 /*BodyRotateSpeed*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 94 /*NormalTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 96 /*FastTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 98 /*BulletTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 100 /*UIDisplayDelayAfterSkillCutIn*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 102 /*UseInitialRangeForCoverMove*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 104 /*SlowTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 106 /*AimIKMinDegree*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 108 /*AimIKMaxDegree*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 110 /*MinimumClearTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 112 /*MinimumClearLevelGap*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 114 /*CheckCheaterMaxUseCostNonArena*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 116 /*CheckCheaterMaxUseCostArena*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 118 /*AllowedMaxTimeScale*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 120 /*RandomAnimationOutput*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 122 /*SummonedTeleportDistance*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 124 /*ArenaMinimumClearTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 126 /*WORLDBOSSBATTLELITTLE*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 128 /*WORLDBOSSBATTLELITTLETw*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 130 /*WORLDBOSSBATTLELITTLEAsia*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 132 /*WORLDBOSSBATTLELITTLENa*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 134 /*WORLDBOSSBATTLELITTLEGlobal*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 136 /*WORLDBOSSBATTLEMIDDLE*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 138 /*WORLDBOSSBATTLEMIDDLETw*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 140 /*WORLDBOSSBATTLEMIDDLEAsia*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 142 /*WORLDBOSSBATTLEMIDDLENa*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 144 /*WORLDBOSSBATTLEMIDDLEGlobal*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 146 /*WORLDBOSSBATTLEHIGH*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 148 /*WORLDBOSSBATTLEHIGHTw*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 150 /*WORLDBOSSBATTLEHIGHAsia*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 152 /*WORLDBOSSBATTLEHIGHNa*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 154 /*WORLDBOSSBATTLEHIGHGlobal*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 156 /*WORLDBOSSBATTLEVERYHIGH*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 158 /*WORLDBOSSBATTLEVERYHIGHTw*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 160 /*WORLDBOSSBATTLEVERYHIGHAsia*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 162 /*WORLDBOSSBATTLEVERYHIGHNa*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 164 /*WORLDBOSSBATTLEVERYHIGHGlobal*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 166 /*WorldRaidAutoSyncTermSecond*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 168 /*WorldRaidBossHpDecreaseTerm*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 170 /*WorldRaidBossParcelReactionDelay*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 172 /*RaidRankingJumpMinimumWaitingTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 174 /*EffectTeleportDistance*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 176 /*AuraExitThresholdMargin*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 178 /*TSAInteractionDamageFactor*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 180 /*VictoryInteractionRate*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 182 /*EchelonExtensionEngageTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 184 /*EchelonExtensionEngageWithSupporterTimelinePath*/, false)
      && verifier.VerifyString(tablePos, 186 /*EchelonExtensionVictoryTimelinePath*/, false)
      && verifier.VerifyField(tablePos, 188 /*EchelonExtensionEchelonMaxCommonCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 190 /*EchelonExtensionEchelonInitCommonCost*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 192 /*EchelonExtensionCostRegenRatio*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 194 /*CheckCheaterMaxUseCostMultiFloorRaid*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
