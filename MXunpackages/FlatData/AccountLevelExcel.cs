// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct AccountLevelExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AccountLevelExcel GetRootAsAccountLevelExcel(ByteBuffer _bb) { return GetRootAsAccountLevelExcel(_bb, new AccountLevelExcel()); }
  public static AccountLevelExcel GetRootAsAccountLevelExcel(ByteBuffer _bb, AccountLevelExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AccountLevelExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Exp { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int NewbieExpRatio { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CloseInterval { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long APAutoChargeMax { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool NeedReportEvent { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Plana.FlatData.AccountLevelExcel> CreateAccountLevelExcel(FlatBufferBuilder builder,
      long Id = 0,
      long Level = 0,
      long Exp = 0,
      int NewbieExpRatio = 0,
      int CloseInterval = 0,
      long APAutoChargeMax = 0,
      bool NeedReportEvent = false) {
    builder.StartTable(7);
    AccountLevelExcel.AddAPAutoChargeMax(builder, APAutoChargeMax);
    AccountLevelExcel.AddExp(builder, Exp);
    AccountLevelExcel.AddLevel(builder, Level);
    AccountLevelExcel.AddId(builder, Id);
    AccountLevelExcel.AddCloseInterval(builder, CloseInterval);
    AccountLevelExcel.AddNewbieExpRatio(builder, NewbieExpRatio);
    AccountLevelExcel.AddNeedReportEvent(builder, NeedReportEvent);
    return AccountLevelExcel.EndAccountLevelExcel(builder);
  }

  public static void StartAccountLevelExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddLevel(FlatBufferBuilder builder, long level) { builder.AddLong(1, level, 0); }
  public static void AddExp(FlatBufferBuilder builder, long exp) { builder.AddLong(2, exp, 0); }
  public static void AddNewbieExpRatio(FlatBufferBuilder builder, int newbieExpRatio) { builder.AddInt(3, newbieExpRatio, 0); }
  public static void AddCloseInterval(FlatBufferBuilder builder, int closeInterval) { builder.AddInt(4, closeInterval, 0); }
  public static void AddAPAutoChargeMax(FlatBufferBuilder builder, long aPAutoChargeMax) { builder.AddLong(5, aPAutoChargeMax, 0); }
  public static void AddNeedReportEvent(FlatBufferBuilder builder, bool needReportEvent) { builder.AddBool(6, needReportEvent, false); }
  public static Offset<Plana.FlatData.AccountLevelExcel> EndAccountLevelExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.AccountLevelExcel>(o);
  }
  public AccountLevelExcelT UnPack() {
    var _o = new AccountLevelExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AccountLevelExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("AccountLevel");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.Level = TableEncryptionService.Convert(this.Level, key);
    _o.Exp = TableEncryptionService.Convert(this.Exp, key);
    _o.NewbieExpRatio = TableEncryptionService.Convert(this.NewbieExpRatio, key);
    _o.CloseInterval = TableEncryptionService.Convert(this.CloseInterval, key);
    _o.APAutoChargeMax = TableEncryptionService.Convert(this.APAutoChargeMax, key);
    _o.NeedReportEvent = TableEncryptionService.Convert(this.NeedReportEvent, key);
  }
  public static Offset<Plana.FlatData.AccountLevelExcel> Pack(FlatBufferBuilder builder, AccountLevelExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.AccountLevelExcel>);
    return CreateAccountLevelExcel(
      builder,
      _o.Id,
      _o.Level,
      _o.Exp,
      _o.NewbieExpRatio,
      _o.CloseInterval,
      _o.APAutoChargeMax,
      _o.NeedReportEvent);
  }
}

public class AccountLevelExcelT
{
  public long Id { get; set; }
  public long Level { get; set; }
  public long Exp { get; set; }
  public int NewbieExpRatio { get; set; }
  public int CloseInterval { get; set; }
  public long APAutoChargeMax { get; set; }
  public bool NeedReportEvent { get; set; }

  public AccountLevelExcelT() {
    this.Id = 0;
    this.Level = 0;
    this.Exp = 0;
    this.NewbieExpRatio = 0;
    this.CloseInterval = 0;
    this.APAutoChargeMax = 0;
    this.NeedReportEvent = false;
  }
}


static public class AccountLevelExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Level*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*Exp*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*NewbieExpRatio*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*CloseInterval*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*APAutoChargeMax*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*NeedReportEvent*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
