// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct ScenarioCharacterNameExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ScenarioCharacterNameExcel GetRootAsScenarioCharacterNameExcel(ByteBuffer _bb) { return GetRootAsScenarioCharacterNameExcel(_bb, new ScenarioCharacterNameExcel()); }
  public static ScenarioCharacterNameExcel GetRootAsScenarioCharacterNameExcel(ByteBuffer _bb, ScenarioCharacterNameExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioCharacterNameExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint CharacterName { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public Plana.FlatData.ProductionStep ProductionStep_ { get { int o = __p.__offset(6); return o != 0 ? (Plana.FlatData.ProductionStep)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.ProductionStep.ToDo; } }
  public string NameKR { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameKRBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetNameKRBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNameKRArray() { return __p.__vector_as_array<byte>(8); }
  public string NicknameKR { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameKRBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNicknameKRBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNicknameKRArray() { return __p.__vector_as_array<byte>(10); }
  public string NameJP { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameJPBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetNameJPBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameJPArray() { return __p.__vector_as_array<byte>(12); }
  public string NicknameJP { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameJPBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetNicknameJPBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetNicknameJPArray() { return __p.__vector_as_array<byte>(14); }
  public string NameTH { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameTHBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNameTHBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNameTHArray() { return __p.__vector_as_array<byte>(16); }
  public string NicknameTH { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameTHBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetNicknameTHBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetNicknameTHArray() { return __p.__vector_as_array<byte>(18); }
  public string NameTW { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameTWBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetNameTWBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetNameTWArray() { return __p.__vector_as_array<byte>(20); }
  public string NicknameTW { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameTWBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetNicknameTWBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetNicknameTWArray() { return __p.__vector_as_array<byte>(22); }
  public string NameEN { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameENBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetNameENBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetNameENArray() { return __p.__vector_as_array<byte>(24); }
  public string NicknameEN { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNicknameENBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetNicknameENBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetNicknameENArray() { return __p.__vector_as_array<byte>(26); }
  public Plana.FlatData.ScenarioCharacterShapes Shape { get { int o = __p.__offset(28); return o != 0 ? (Plana.FlatData.ScenarioCharacterShapes)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.ScenarioCharacterShapes.None; } }
  public string SpinePrefabName { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSpinePrefabNameBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetSpinePrefabNameBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetSpinePrefabNameArray() { return __p.__vector_as_array<byte>(30); }
  public string SmallPortrait { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallPortraitBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetSmallPortraitBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetSmallPortraitArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<Plana.FlatData.ScenarioCharacterNameExcel> CreateScenarioCharacterNameExcel(FlatBufferBuilder builder,
      uint CharacterName = 0,
      Plana.FlatData.ProductionStep ProductionStep_ = Plana.FlatData.ProductionStep.ToDo,
      StringOffset NameKROffset = default(StringOffset),
      StringOffset NicknameKROffset = default(StringOffset),
      StringOffset NameJPOffset = default(StringOffset),
      StringOffset NicknameJPOffset = default(StringOffset),
      StringOffset NameTHOffset = default(StringOffset),
      StringOffset NicknameTHOffset = default(StringOffset),
      StringOffset NameTWOffset = default(StringOffset),
      StringOffset NicknameTWOffset = default(StringOffset),
      StringOffset NameENOffset = default(StringOffset),
      StringOffset NicknameENOffset = default(StringOffset),
      Plana.FlatData.ScenarioCharacterShapes Shape = Plana.FlatData.ScenarioCharacterShapes.None,
      StringOffset SpinePrefabNameOffset = default(StringOffset),
      StringOffset SmallPortraitOffset = default(StringOffset)) {
    builder.StartTable(15);
    ScenarioCharacterNameExcel.AddSmallPortrait(builder, SmallPortraitOffset);
    ScenarioCharacterNameExcel.AddSpinePrefabName(builder, SpinePrefabNameOffset);
    ScenarioCharacterNameExcel.AddShape(builder, Shape);
    ScenarioCharacterNameExcel.AddNicknameEN(builder, NicknameENOffset);
    ScenarioCharacterNameExcel.AddNameEN(builder, NameENOffset);
    ScenarioCharacterNameExcel.AddNicknameTW(builder, NicknameTWOffset);
    ScenarioCharacterNameExcel.AddNameTW(builder, NameTWOffset);
    ScenarioCharacterNameExcel.AddNicknameTH(builder, NicknameTHOffset);
    ScenarioCharacterNameExcel.AddNameTH(builder, NameTHOffset);
    ScenarioCharacterNameExcel.AddNicknameJP(builder, NicknameJPOffset);
    ScenarioCharacterNameExcel.AddNameJP(builder, NameJPOffset);
    ScenarioCharacterNameExcel.AddNicknameKR(builder, NicknameKROffset);
    ScenarioCharacterNameExcel.AddNameKR(builder, NameKROffset);
    ScenarioCharacterNameExcel.AddProductionStep_(builder, ProductionStep_);
    ScenarioCharacterNameExcel.AddCharacterName(builder, CharacterName);
    return ScenarioCharacterNameExcel.EndScenarioCharacterNameExcel(builder);
  }

  public static void StartScenarioCharacterNameExcel(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddCharacterName(FlatBufferBuilder builder, uint characterName) { builder.AddUint(0, characterName, 0); }
  public static void AddProductionStep_(FlatBufferBuilder builder, Plana.FlatData.ProductionStep productionStep_) { builder.AddInt(1, (int)productionStep_, 0); }
  public static void AddNameKR(FlatBufferBuilder builder, StringOffset nameKROffset) { builder.AddOffset(2, nameKROffset.Value, 0); }
  public static void AddNicknameKR(FlatBufferBuilder builder, StringOffset nicknameKROffset) { builder.AddOffset(3, nicknameKROffset.Value, 0); }
  public static void AddNameJP(FlatBufferBuilder builder, StringOffset nameJPOffset) { builder.AddOffset(4, nameJPOffset.Value, 0); }
  public static void AddNicknameJP(FlatBufferBuilder builder, StringOffset nicknameJPOffset) { builder.AddOffset(5, nicknameJPOffset.Value, 0); }
  public static void AddNameTH(FlatBufferBuilder builder, StringOffset nameTHOffset) { builder.AddOffset(6, nameTHOffset.Value, 0); }
  public static void AddNicknameTH(FlatBufferBuilder builder, StringOffset nicknameTHOffset) { builder.AddOffset(7, nicknameTHOffset.Value, 0); }
  public static void AddNameTW(FlatBufferBuilder builder, StringOffset nameTWOffset) { builder.AddOffset(8, nameTWOffset.Value, 0); }
  public static void AddNicknameTW(FlatBufferBuilder builder, StringOffset nicknameTWOffset) { builder.AddOffset(9, nicknameTWOffset.Value, 0); }
  public static void AddNameEN(FlatBufferBuilder builder, StringOffset nameENOffset) { builder.AddOffset(10, nameENOffset.Value, 0); }
  public static void AddNicknameEN(FlatBufferBuilder builder, StringOffset nicknameENOffset) { builder.AddOffset(11, nicknameENOffset.Value, 0); }
  public static void AddShape(FlatBufferBuilder builder, Plana.FlatData.ScenarioCharacterShapes shape) { builder.AddInt(12, (int)shape, 0); }
  public static void AddSpinePrefabName(FlatBufferBuilder builder, StringOffset spinePrefabNameOffset) { builder.AddOffset(13, spinePrefabNameOffset.Value, 0); }
  public static void AddSmallPortrait(FlatBufferBuilder builder, StringOffset smallPortraitOffset) { builder.AddOffset(14, smallPortraitOffset.Value, 0); }
  public static Offset<Plana.FlatData.ScenarioCharacterNameExcel> EndScenarioCharacterNameExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.ScenarioCharacterNameExcel>(o);
  }
  public ScenarioCharacterNameExcelT UnPack() {
    var _o = new ScenarioCharacterNameExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioCharacterNameExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("ScenarioCharacterName");
    _o.CharacterName = TableEncryptionService.Convert(this.CharacterName, key);
    _o.ProductionStep_ = TableEncryptionService.Convert(this.ProductionStep_, key);
    _o.NameKR = TableEncryptionService.Convert(this.NameKR, key);
    _o.NicknameKR = TableEncryptionService.Convert(this.NicknameKR, key);
    _o.NameJP = TableEncryptionService.Convert(this.NameJP, key);
    _o.NicknameJP = TableEncryptionService.Convert(this.NicknameJP, key);
    _o.NameTH = TableEncryptionService.Convert(this.NameTH, key);
    _o.NicknameTH = TableEncryptionService.Convert(this.NicknameTH, key);
    _o.NameTW = TableEncryptionService.Convert(this.NameTW, key);
    _o.NicknameTW = TableEncryptionService.Convert(this.NicknameTW, key);
    _o.NameEN = TableEncryptionService.Convert(this.NameEN, key);
    _o.NicknameEN = TableEncryptionService.Convert(this.NicknameEN, key);
    _o.Shape = TableEncryptionService.Convert(this.Shape, key);
    _o.SpinePrefabName = TableEncryptionService.Convert(this.SpinePrefabName, key);
    _o.SmallPortrait = TableEncryptionService.Convert(this.SmallPortrait, key);
  }
  public static Offset<Plana.FlatData.ScenarioCharacterNameExcel> Pack(FlatBufferBuilder builder, ScenarioCharacterNameExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.ScenarioCharacterNameExcel>);
    var _NameKR = _o.NameKR == null ? default(StringOffset) : builder.CreateString(_o.NameKR);
    var _NicknameKR = _o.NicknameKR == null ? default(StringOffset) : builder.CreateString(_o.NicknameKR);
    var _NameJP = _o.NameJP == null ? default(StringOffset) : builder.CreateString(_o.NameJP);
    var _NicknameJP = _o.NicknameJP == null ? default(StringOffset) : builder.CreateString(_o.NicknameJP);
    var _NameTH = _o.NameTH == null ? default(StringOffset) : builder.CreateString(_o.NameTH);
    var _NicknameTH = _o.NicknameTH == null ? default(StringOffset) : builder.CreateString(_o.NicknameTH);
    var _NameTW = _o.NameTW == null ? default(StringOffset) : builder.CreateString(_o.NameTW);
    var _NicknameTW = _o.NicknameTW == null ? default(StringOffset) : builder.CreateString(_o.NicknameTW);
    var _NameEN = _o.NameEN == null ? default(StringOffset) : builder.CreateString(_o.NameEN);
    var _NicknameEN = _o.NicknameEN == null ? default(StringOffset) : builder.CreateString(_o.NicknameEN);
    var _SpinePrefabName = _o.SpinePrefabName == null ? default(StringOffset) : builder.CreateString(_o.SpinePrefabName);
    var _SmallPortrait = _o.SmallPortrait == null ? default(StringOffset) : builder.CreateString(_o.SmallPortrait);
    return CreateScenarioCharacterNameExcel(
      builder,
      _o.CharacterName,
      _o.ProductionStep_,
      _NameKR,
      _NicknameKR,
      _NameJP,
      _NicknameJP,
      _NameTH,
      _NicknameTH,
      _NameTW,
      _NicknameTW,
      _NameEN,
      _NicknameEN,
      _o.Shape,
      _SpinePrefabName,
      _SmallPortrait);
  }
}

public class ScenarioCharacterNameExcelT
{
  public uint CharacterName { get; set; }
  public Plana.FlatData.ProductionStep ProductionStep_ { get; set; }
  public string NameKR { get; set; }
  public string NicknameKR { get; set; }
  public string NameJP { get; set; }
  public string NicknameJP { get; set; }
  public string NameTH { get; set; }
  public string NicknameTH { get; set; }
  public string NameTW { get; set; }
  public string NicknameTW { get; set; }
  public string NameEN { get; set; }
  public string NicknameEN { get; set; }
  public Plana.FlatData.ScenarioCharacterShapes Shape { get; set; }
  public string SpinePrefabName { get; set; }
  public string SmallPortrait { get; set; }

  public ScenarioCharacterNameExcelT() {
    this.CharacterName = 0;
    this.ProductionStep_ = Plana.FlatData.ProductionStep.ToDo;
    this.NameKR = null;
    this.NicknameKR = null;
    this.NameJP = null;
    this.NicknameJP = null;
    this.NameTH = null;
    this.NicknameTH = null;
    this.NameTW = null;
    this.NicknameTW = null;
    this.NameEN = null;
    this.NicknameEN = null;
    this.Shape = Plana.FlatData.ScenarioCharacterShapes.None;
    this.SpinePrefabName = null;
    this.SmallPortrait = null;
  }
}


static public class ScenarioCharacterNameExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharacterName*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ProductionStep_*/, 4 /*Plana.FlatData.ProductionStep*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*NameKR*/, false)
      && verifier.VerifyString(tablePos, 10 /*NicknameKR*/, false)
      && verifier.VerifyString(tablePos, 12 /*NameJP*/, false)
      && verifier.VerifyString(tablePos, 14 /*NicknameJP*/, false)
      && verifier.VerifyString(tablePos, 16 /*NameTH*/, false)
      && verifier.VerifyString(tablePos, 18 /*NicknameTH*/, false)
      && verifier.VerifyString(tablePos, 20 /*NameTW*/, false)
      && verifier.VerifyString(tablePos, 22 /*NicknameTW*/, false)
      && verifier.VerifyString(tablePos, 24 /*NameEN*/, false)
      && verifier.VerifyString(tablePos, 26 /*NicknameEN*/, false)
      && verifier.VerifyField(tablePos, 28 /*Shape*/, 4 /*Plana.FlatData.ScenarioCharacterShapes*/, 4, false)
      && verifier.VerifyString(tablePos, 30 /*SpinePrefabName*/, false)
      && verifier.VerifyString(tablePos, 32 /*SmallPortrait*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
