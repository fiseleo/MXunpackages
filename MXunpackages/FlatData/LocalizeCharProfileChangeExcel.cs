// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct LocalizeCharProfileChangeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static LocalizeCharProfileChangeExcel GetRootAsLocalizeCharProfileChangeExcel(ByteBuffer _bb) { return GetRootAsLocalizeCharProfileChangeExcel(_bb, new LocalizeCharProfileChangeExcel()); }
  public static LocalizeCharProfileChangeExcel GetRootAsLocalizeCharProfileChangeExcel(ByteBuffer _bb, LocalizeCharProfileChangeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LocalizeCharProfileChangeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long CharacterId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ScenarioModeId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long ChangeCharacterID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Plana.FlatData.LocalizeCharProfileChangeExcel> CreateLocalizeCharProfileChangeExcel(FlatBufferBuilder builder,
      long CharacterId = 0,
      long ScenarioModeId = 0,
      long ChangeCharacterID = 0) {
    builder.StartTable(3);
    LocalizeCharProfileChangeExcel.AddChangeCharacterID(builder, ChangeCharacterID);
    LocalizeCharProfileChangeExcel.AddScenarioModeId(builder, ScenarioModeId);
    LocalizeCharProfileChangeExcel.AddCharacterId(builder, CharacterId);
    return LocalizeCharProfileChangeExcel.EndLocalizeCharProfileChangeExcel(builder);
  }

  public static void StartLocalizeCharProfileChangeExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCharacterId(FlatBufferBuilder builder, long characterId) { builder.AddLong(0, characterId, 0); }
  public static void AddScenarioModeId(FlatBufferBuilder builder, long scenarioModeId) { builder.AddLong(1, scenarioModeId, 0); }
  public static void AddChangeCharacterID(FlatBufferBuilder builder, long changeCharacterID) { builder.AddLong(2, changeCharacterID, 0); }
  public static Offset<Plana.FlatData.LocalizeCharProfileChangeExcel> EndLocalizeCharProfileChangeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.LocalizeCharProfileChangeExcel>(o);
  }
  public LocalizeCharProfileChangeExcelT UnPack() {
    var _o = new LocalizeCharProfileChangeExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LocalizeCharProfileChangeExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("LocalizeCharProfileChange");
    _o.CharacterId = TableEncryptionService.Convert(this.CharacterId, key);
    _o.ScenarioModeId = TableEncryptionService.Convert(this.ScenarioModeId, key);
    _o.ChangeCharacterID = TableEncryptionService.Convert(this.ChangeCharacterID, key);
  }
  public static Offset<Plana.FlatData.LocalizeCharProfileChangeExcel> Pack(FlatBufferBuilder builder, LocalizeCharProfileChangeExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.LocalizeCharProfileChangeExcel>);
    return CreateLocalizeCharProfileChangeExcel(
      builder,
      _o.CharacterId,
      _o.ScenarioModeId,
      _o.ChangeCharacterID);
  }
}

public class LocalizeCharProfileChangeExcelT
{
  public long CharacterId { get; set; }
  public long ScenarioModeId { get; set; }
  public long ChangeCharacterID { get; set; }

  public LocalizeCharProfileChangeExcelT() {
    this.CharacterId = 0;
    this.ScenarioModeId = 0;
    this.ChangeCharacterID = 0;
  }
}


static public class LocalizeCharProfileChangeExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CharacterId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*ScenarioModeId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*ChangeCharacterID*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
