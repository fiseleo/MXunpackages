// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct CharacterDialogEmojiExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static CharacterDialogEmojiExcel GetRootAsCharacterDialogEmojiExcel(ByteBuffer _bb) { return GetRootAsCharacterDialogEmojiExcel(_bb, new CharacterDialogEmojiExcel()); }
  public static CharacterDialogEmojiExcel GetRootAsCharacterDialogEmojiExcel(ByteBuffer _bb, CharacterDialogEmojiExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterDialogEmojiExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int TargetIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DialogType { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDialogTypeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDialogTypeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDialogTypeArray() { return __p.__vector_as_array<byte>(8); }
  public long Duration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public bool HideUI { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string LocalizeKR { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeKRBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLocalizeKRBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLocalizeKRArray() { return __p.__vector_as_array<byte>(14); }
  public string LocalizeJP { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLocalizeJPBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLocalizeJPBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLocalizeJPArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<Plana.FlatData.CharacterDialogEmojiExcel> CreateCharacterDialogEmojiExcel(FlatBufferBuilder builder,
      long GroupId = 0,
      int TargetIndex = 0,
      StringOffset DialogTypeOffset = default(StringOffset),
      long Duration = 0,
      bool HideUI = false,
      StringOffset LocalizeKROffset = default(StringOffset),
      StringOffset LocalizeJPOffset = default(StringOffset)) {
    builder.StartTable(7);
    CharacterDialogEmojiExcel.AddDuration(builder, Duration);
    CharacterDialogEmojiExcel.AddGroupId(builder, GroupId);
    CharacterDialogEmojiExcel.AddLocalizeJP(builder, LocalizeJPOffset);
    CharacterDialogEmojiExcel.AddLocalizeKR(builder, LocalizeKROffset);
    CharacterDialogEmojiExcel.AddDialogType(builder, DialogTypeOffset);
    CharacterDialogEmojiExcel.AddTargetIndex(builder, TargetIndex);
    CharacterDialogEmojiExcel.AddHideUI(builder, HideUI);
    return CharacterDialogEmojiExcel.EndCharacterDialogEmojiExcel(builder);
  }

  public static void StartCharacterDialogEmojiExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGroupId(FlatBufferBuilder builder, long groupId) { builder.AddLong(0, groupId, 0); }
  public static void AddTargetIndex(FlatBufferBuilder builder, int targetIndex) { builder.AddInt(1, targetIndex, 0); }
  public static void AddDialogType(FlatBufferBuilder builder, StringOffset dialogTypeOffset) { builder.AddOffset(2, dialogTypeOffset.Value, 0); }
  public static void AddDuration(FlatBufferBuilder builder, long duration) { builder.AddLong(3, duration, 0); }
  public static void AddHideUI(FlatBufferBuilder builder, bool hideUI) { builder.AddBool(4, hideUI, false); }
  public static void AddLocalizeKR(FlatBufferBuilder builder, StringOffset localizeKROffset) { builder.AddOffset(5, localizeKROffset.Value, 0); }
  public static void AddLocalizeJP(FlatBufferBuilder builder, StringOffset localizeJPOffset) { builder.AddOffset(6, localizeJPOffset.Value, 0); }
  public static Offset<Plana.FlatData.CharacterDialogEmojiExcel> EndCharacterDialogEmojiExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.CharacterDialogEmojiExcel>(o);
  }
  public CharacterDialogEmojiExcelT UnPack() {
    var _o = new CharacterDialogEmojiExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterDialogEmojiExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("CharacterDialogEmoji");
    _o.GroupId = TableEncryptionService.Convert(this.GroupId, key);
    _o.TargetIndex = TableEncryptionService.Convert(this.TargetIndex, key);
    _o.DialogType = TableEncryptionService.Convert(this.DialogType, key);
    _o.Duration = TableEncryptionService.Convert(this.Duration, key);
    _o.HideUI = TableEncryptionService.Convert(this.HideUI, key);
    _o.LocalizeKR = TableEncryptionService.Convert(this.LocalizeKR, key);
    _o.LocalizeJP = TableEncryptionService.Convert(this.LocalizeJP, key);
  }
  public static Offset<Plana.FlatData.CharacterDialogEmojiExcel> Pack(FlatBufferBuilder builder, CharacterDialogEmojiExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.CharacterDialogEmojiExcel>);
    var _DialogType = _o.DialogType == null ? default(StringOffset) : builder.CreateString(_o.DialogType);
    var _LocalizeKR = _o.LocalizeKR == null ? default(StringOffset) : builder.CreateString(_o.LocalizeKR);
    var _LocalizeJP = _o.LocalizeJP == null ? default(StringOffset) : builder.CreateString(_o.LocalizeJP);
    return CreateCharacterDialogEmojiExcel(
      builder,
      _o.GroupId,
      _o.TargetIndex,
      _DialogType,
      _o.Duration,
      _o.HideUI,
      _LocalizeKR,
      _LocalizeJP);
  }
}

public class CharacterDialogEmojiExcelT
{
  public long GroupId { get; set; }
  public int TargetIndex { get; set; }
  public string DialogType { get; set; }
  public long Duration { get; set; }
  public bool HideUI { get; set; }
  public string LocalizeKR { get; set; }
  public string LocalizeJP { get; set; }

  public CharacterDialogEmojiExcelT() {
    this.GroupId = 0;
    this.TargetIndex = 0;
    this.DialogType = null;
    this.Duration = 0;
    this.HideUI = false;
    this.LocalizeKR = null;
    this.LocalizeJP = null;
  }
}


static public class CharacterDialogEmojiExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*TargetIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*DialogType*/, false)
      && verifier.VerifyField(tablePos, 10 /*Duration*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*HideUI*/, 1 /*bool*/, 1, false)
      && verifier.VerifyString(tablePos, 14 /*LocalizeKR*/, false)
      && verifier.VerifyString(tablePos, 16 /*LocalizeJP*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
