// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct AddressableBlackListExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AddressableBlackListExcel GetRootAsAddressableBlackListExcel(ByteBuffer _bb) { return GetRootAsAddressableBlackListExcel(_bb, new AddressableBlackListExcel()); }
  public static AddressableBlackListExcel GetRootAsAddressableBlackListExcel(ByteBuffer _bb, AddressableBlackListExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AddressableBlackListExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string FolderPath(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int FolderPathLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ResourcePath(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int ResourcePathLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Plana.FlatData.AddressableBlackListExcel> CreateAddressableBlackListExcel(FlatBufferBuilder builder,
      long Id = 0,
      VectorOffset FolderPathOffset = default(VectorOffset),
      VectorOffset ResourcePathOffset = default(VectorOffset)) {
    builder.StartTable(3);
    AddressableBlackListExcel.AddId(builder, Id);
    AddressableBlackListExcel.AddResourcePath(builder, ResourcePathOffset);
    AddressableBlackListExcel.AddFolderPath(builder, FolderPathOffset);
    return AddressableBlackListExcel.EndAddressableBlackListExcel(builder);
  }

  public static void StartAddressableBlackListExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 0); }
  public static void AddFolderPath(FlatBufferBuilder builder, VectorOffset folderPathOffset) { builder.AddOffset(1, folderPathOffset.Value, 0); }
  public static VectorOffset CreateFolderPathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFolderPathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFolderPathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFolderPathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFolderPathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddResourcePath(FlatBufferBuilder builder, VectorOffset resourcePathOffset) { builder.AddOffset(2, resourcePathOffset.Value, 0); }
  public static VectorOffset CreateResourcePathVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateResourcePathVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateResourcePathVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateResourcePathVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartResourcePathVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Plana.FlatData.AddressableBlackListExcel> EndAddressableBlackListExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.AddressableBlackListExcel>(o);
  }
  public AddressableBlackListExcelT UnPack() {
    var _o = new AddressableBlackListExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AddressableBlackListExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("AddressableBlackList");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.FolderPath = new List<string>();
    for (var _j = 0; _j < this.FolderPathLength; ++_j) {_o.FolderPath.Add(TableEncryptionService.Convert(this.FolderPath(_j), key));}
    _o.ResourcePath = new List<string>();
    for (var _j = 0; _j < this.ResourcePathLength; ++_j) {_o.ResourcePath.Add(TableEncryptionService.Convert(this.ResourcePath(_j), key));}
  }
  public static Offset<Plana.FlatData.AddressableBlackListExcel> Pack(FlatBufferBuilder builder, AddressableBlackListExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.AddressableBlackListExcel>);
    var _FolderPath = default(VectorOffset);
    if (_o.FolderPath != null) {
      var __FolderPath = new StringOffset[_o.FolderPath.Count];
      for (var _j = 0; _j < __FolderPath.Length; ++_j) { __FolderPath[_j] = builder.CreateString(_o.FolderPath[_j]); }
      _FolderPath = CreateFolderPathVector(builder, __FolderPath);
    }
    var _ResourcePath = default(VectorOffset);
    if (_o.ResourcePath != null) {
      var __ResourcePath = new StringOffset[_o.ResourcePath.Count];
      for (var _j = 0; _j < __ResourcePath.Length; ++_j) { __ResourcePath[_j] = builder.CreateString(_o.ResourcePath[_j]); }
      _ResourcePath = CreateResourcePathVector(builder, __ResourcePath);
    }
    return CreateAddressableBlackListExcel(
      builder,
      _o.Id,
      _FolderPath,
      _ResourcePath);
  }
}

public class AddressableBlackListExcelT
{
  public long Id { get; set; }
  public List<string> FolderPath { get; set; }
  public List<string> ResourcePath { get; set; }

  public AddressableBlackListExcelT() {
    this.Id = 0;
    this.FolderPath = null;
    this.ResourcePath = null;
  }
}


static public class AddressableBlackListExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 8 /*long*/, 8, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*FolderPath*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*ResourcePath*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
