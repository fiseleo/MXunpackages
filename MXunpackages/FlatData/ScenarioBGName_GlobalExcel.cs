// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct ScenarioBGName_GlobalExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ScenarioBGName_GlobalExcel GetRootAsScenarioBGName_GlobalExcel(ByteBuffer _bb) { return GetRootAsScenarioBGName_GlobalExcel(_bb, new ScenarioBGName_GlobalExcel()); }
  public static ScenarioBGName_GlobalExcel GetRootAsScenarioBGName_GlobalExcel(ByteBuffer _bb, ScenarioBGName_GlobalExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioBGName_GlobalExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint GroupName { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NameKr { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NameTw { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NameAsia { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NameNa { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NameGlobal { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NameTeen { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Plana.FlatData.ScenarioBGName_GlobalExcel> CreateScenarioBGName_GlobalExcel(FlatBufferBuilder builder,
      uint GroupName = 0,
      uint NameKr = 0,
      uint NameTw = 0,
      uint NameAsia = 0,
      uint NameNa = 0,
      uint NameGlobal = 0,
      uint NameTeen = 0) {
    builder.StartTable(7);
    ScenarioBGName_GlobalExcel.AddNameTeen(builder, NameTeen);
    ScenarioBGName_GlobalExcel.AddNameGlobal(builder, NameGlobal);
    ScenarioBGName_GlobalExcel.AddNameNa(builder, NameNa);
    ScenarioBGName_GlobalExcel.AddNameAsia(builder, NameAsia);
    ScenarioBGName_GlobalExcel.AddNameTw(builder, NameTw);
    ScenarioBGName_GlobalExcel.AddNameKr(builder, NameKr);
    ScenarioBGName_GlobalExcel.AddGroupName(builder, GroupName);
    return ScenarioBGName_GlobalExcel.EndScenarioBGName_GlobalExcel(builder);
  }

  public static void StartScenarioBGName_GlobalExcel(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGroupName(FlatBufferBuilder builder, uint groupName) { builder.AddUint(0, groupName, 0); }
  public static void AddNameKr(FlatBufferBuilder builder, uint nameKr) { builder.AddUint(1, nameKr, 0); }
  public static void AddNameTw(FlatBufferBuilder builder, uint nameTw) { builder.AddUint(2, nameTw, 0); }
  public static void AddNameAsia(FlatBufferBuilder builder, uint nameAsia) { builder.AddUint(3, nameAsia, 0); }
  public static void AddNameNa(FlatBufferBuilder builder, uint nameNa) { builder.AddUint(4, nameNa, 0); }
  public static void AddNameGlobal(FlatBufferBuilder builder, uint nameGlobal) { builder.AddUint(5, nameGlobal, 0); }
  public static void AddNameTeen(FlatBufferBuilder builder, uint nameTeen) { builder.AddUint(6, nameTeen, 0); }
  public static Offset<Plana.FlatData.ScenarioBGName_GlobalExcel> EndScenarioBGName_GlobalExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.ScenarioBGName_GlobalExcel>(o);
  }
  public ScenarioBGName_GlobalExcelT UnPack() {
    var _o = new ScenarioBGName_GlobalExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioBGName_GlobalExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("ScenarioBGName_Global");
    _o.GroupName = TableEncryptionService.Convert(this.GroupName, key);
    _o.NameKr = TableEncryptionService.Convert(this.NameKr, key);
    _o.NameTw = TableEncryptionService.Convert(this.NameTw, key);
    _o.NameAsia = TableEncryptionService.Convert(this.NameAsia, key);
    _o.NameNa = TableEncryptionService.Convert(this.NameNa, key);
    _o.NameGlobal = TableEncryptionService.Convert(this.NameGlobal, key);
    _o.NameTeen = TableEncryptionService.Convert(this.NameTeen, key);
  }
  public static Offset<Plana.FlatData.ScenarioBGName_GlobalExcel> Pack(FlatBufferBuilder builder, ScenarioBGName_GlobalExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.ScenarioBGName_GlobalExcel>);
    return CreateScenarioBGName_GlobalExcel(
      builder,
      _o.GroupName,
      _o.NameKr,
      _o.NameTw,
      _o.NameAsia,
      _o.NameNa,
      _o.NameGlobal,
      _o.NameTeen);
  }
}

public class ScenarioBGName_GlobalExcelT
{
  public uint GroupName { get; set; }
  public uint NameKr { get; set; }
  public uint NameTw { get; set; }
  public uint NameAsia { get; set; }
  public uint NameNa { get; set; }
  public uint NameGlobal { get; set; }
  public uint NameTeen { get; set; }

  public ScenarioBGName_GlobalExcelT() {
    this.GroupName = 0;
    this.NameKr = 0;
    this.NameTw = 0;
    this.NameAsia = 0;
    this.NameNa = 0;
    this.NameGlobal = 0;
    this.NameTeen = 0;
  }
}


static public class ScenarioBGName_GlobalExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*GroupName*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*NameKr*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*NameTw*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*NameAsia*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*NameNa*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*NameGlobal*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*NameTeen*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
