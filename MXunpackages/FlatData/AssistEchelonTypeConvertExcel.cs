// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct AssistEchelonTypeConvertExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static AssistEchelonTypeConvertExcel GetRootAsAssistEchelonTypeConvertExcel(ByteBuffer _bb) { return GetRootAsAssistEchelonTypeConvertExcel(_bb, new AssistEchelonTypeConvertExcel()); }
  public static AssistEchelonTypeConvertExcel GetRootAsAssistEchelonTypeConvertExcel(ByteBuffer _bb, AssistEchelonTypeConvertExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AssistEchelonTypeConvertExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Plana.FlatData.EchelonType Contents { get { int o = __p.__offset(4); return o != 0 ? (Plana.FlatData.EchelonType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.EchelonType.None; } }
  public Plana.FlatData.EchelonType ConvertTo { get { int o = __p.__offset(6); return o != 0 ? (Plana.FlatData.EchelonType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.EchelonType.None; } }

  public static Offset<Plana.FlatData.AssistEchelonTypeConvertExcel> CreateAssistEchelonTypeConvertExcel(FlatBufferBuilder builder,
      Plana.FlatData.EchelonType Contents = Plana.FlatData.EchelonType.None,
      Plana.FlatData.EchelonType ConvertTo = Plana.FlatData.EchelonType.None) {
    builder.StartTable(2);
    AssistEchelonTypeConvertExcel.AddConvertTo(builder, ConvertTo);
    AssistEchelonTypeConvertExcel.AddContents(builder, Contents);
    return AssistEchelonTypeConvertExcel.EndAssistEchelonTypeConvertExcel(builder);
  }

  public static void StartAssistEchelonTypeConvertExcel(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddContents(FlatBufferBuilder builder, Plana.FlatData.EchelonType contents) { builder.AddInt(0, (int)contents, 0); }
  public static void AddConvertTo(FlatBufferBuilder builder, Plana.FlatData.EchelonType convertTo) { builder.AddInt(1, (int)convertTo, 0); }
  public static Offset<Plana.FlatData.AssistEchelonTypeConvertExcel> EndAssistEchelonTypeConvertExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.AssistEchelonTypeConvertExcel>(o);
  }
  public AssistEchelonTypeConvertExcelT UnPack() {
    var _o = new AssistEchelonTypeConvertExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AssistEchelonTypeConvertExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("AssistEchelonTypeConvert");
    _o.Contents = TableEncryptionService.Convert(this.Contents, key);
    _o.ConvertTo = TableEncryptionService.Convert(this.ConvertTo, key);
  }
  public static Offset<Plana.FlatData.AssistEchelonTypeConvertExcel> Pack(FlatBufferBuilder builder, AssistEchelonTypeConvertExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.AssistEchelonTypeConvertExcel>);
    return CreateAssistEchelonTypeConvertExcel(
      builder,
      _o.Contents,
      _o.ConvertTo);
  }
}

public class AssistEchelonTypeConvertExcelT
{
  public Plana.FlatData.EchelonType Contents { get; set; }
  public Plana.FlatData.EchelonType ConvertTo { get; set; }

  public AssistEchelonTypeConvertExcelT() {
    this.Contents = Plana.FlatData.EchelonType.None;
    this.ConvertTo = Plana.FlatData.EchelonType.None;
  }
}


static public class AssistEchelonTypeConvertExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Contents*/, 4 /*Plana.FlatData.EchelonType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ConvertTo*/, 4 /*Plana.FlatData.EchelonType*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
