// <auto-generated>
//  automatically generated by the PlanaBuffers compiler, do not modify
//PlanaBuffer. Custom Flatbuff Compiler
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct TagSettingExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static TagSettingExcel GetRootAsTagSettingExcel(ByteBuffer _bb) { return GetRootAsTagSettingExcel(_bb, new TagSettingExcel()); }
  public static TagSettingExcel GetRootAsTagSettingExcel(ByteBuffer _bb, TagSettingExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TagSettingExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Plana.FlatData.Tag Id { get { int o = __p.__offset(4); return o != 0 ? (Plana.FlatData.Tag)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.Tag.A; } }
  public bool IsOpen { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint LocalizeEtcId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<Plana.FlatData.TagSettingExcel> CreateTagSettingExcel(FlatBufferBuilder builder,
      Plana.FlatData.Tag Id = Plana.FlatData.Tag.A,
      bool IsOpen = false,
      uint LocalizeEtcId = 0) {
    builder.StartTable(3);
    TagSettingExcel.AddLocalizeEtcId(builder, LocalizeEtcId);
    TagSettingExcel.AddId(builder, Id);
    TagSettingExcel.AddIsOpen(builder, IsOpen);
    return TagSettingExcel.EndTagSettingExcel(builder);
  }

  public static void StartTagSettingExcel(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, Plana.FlatData.Tag id) { builder.AddInt(0, (int)id, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, bool isOpen) { builder.AddBool(1, isOpen, false); }
  public static void AddLocalizeEtcId(FlatBufferBuilder builder, uint localizeEtcId) { builder.AddUint(2, localizeEtcId, 0); }
  public static Offset<Plana.FlatData.TagSettingExcel> EndTagSettingExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.TagSettingExcel>(o);
  }
  public TagSettingExcelT UnPack() {
    var _o = new TagSettingExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TagSettingExcelT _o) {
        byte[] key = TableEncryptionService.CreateKey("TagSetting");
    _o.Id = TableEncryptionService.Convert(this.Id, key);
    _o.IsOpen = TableEncryptionService.Convert(this.IsOpen, key);
    _o.LocalizeEtcId = TableEncryptionService.Convert(this.LocalizeEtcId, key);
  }
  public static Offset<Plana.FlatData.TagSettingExcel> Pack(FlatBufferBuilder builder, TagSettingExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.TagSettingExcel>);
    return CreateTagSettingExcel(
      builder,
      _o.Id,
      _o.IsOpen,
      _o.LocalizeEtcId);
  }
}

public class TagSettingExcelT
{
  public Plana.FlatData.Tag Id { get; set; }
  public bool IsOpen { get; set; }
  public uint LocalizeEtcId { get; set; }

  public TagSettingExcelT() {
    this.Id = Plana.FlatData.Tag.A;
    this.IsOpen = false;
    this.LocalizeEtcId = 0;
  }
}


static public class TagSettingExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Id*/, 4 /*Plana.FlatData.Tag*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*IsOpen*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*LocalizeEtcId*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
