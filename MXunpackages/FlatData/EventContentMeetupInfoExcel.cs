// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct EventContentMeetupInfoExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static EventContentMeetupInfoExcel GetRootAsEventContentMeetupInfoExcel(ByteBuffer _bb) { return GetRootAsEventContentMeetupInfoExcel(_bb, new EventContentMeetupInfoExcel()); }
  public static EventContentMeetupInfoExcel GetRootAsEventContentMeetupInfoExcel(ByteBuffer _bb, EventContentMeetupInfoExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventContentMeetupInfoExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long EventContentId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Plana.FlatData.ParcelType CostParcelType { get { int o = __p.__offset(6); return o != 0 ? (Plana.FlatData.ParcelType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.ParcelType.None; } }
  public long CostId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int CostAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Plana.FlatData.EventContentMeetupInfoExcel> CreateEventContentMeetupInfoExcel(FlatBufferBuilder builder,
      long EventContentId = 0,
      Plana.FlatData.ParcelType CostParcelType = Plana.FlatData.ParcelType.None,
      long CostId = 0,
      int CostAmount = 0) {
    builder.StartTable(4);
    EventContentMeetupInfoExcel.AddCostId(builder, CostId);
    EventContentMeetupInfoExcel.AddEventContentId(builder, EventContentId);
    EventContentMeetupInfoExcel.AddCostAmount(builder, CostAmount);
    EventContentMeetupInfoExcel.AddCostParcelType(builder, CostParcelType);
    return EventContentMeetupInfoExcel.EndEventContentMeetupInfoExcel(builder);
  }

  public static void StartEventContentMeetupInfoExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEventContentId(FlatBufferBuilder builder, long eventContentId) { builder.AddLong(0, eventContentId, 0); }
  public static void AddCostParcelType(FlatBufferBuilder builder, Plana.FlatData.ParcelType costParcelType) { builder.AddInt(1, (int)costParcelType, 0); }
  public static void AddCostId(FlatBufferBuilder builder, long costId) { builder.AddLong(2, costId, 0); }
  public static void AddCostAmount(FlatBufferBuilder builder, int costAmount) { builder.AddInt(3, costAmount, 0); }
  public static Offset<Plana.FlatData.EventContentMeetupInfoExcel> EndEventContentMeetupInfoExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.EventContentMeetupInfoExcel>(o);
  }
  public EventContentMeetupInfoExcelT UnPack() {
    var _o = new EventContentMeetupInfoExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventContentMeetupInfoExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("EventContentMeetupInfo");
    _o.EventContentId = TableEncryptionService.Convert(this.EventContentId, key);
    _o.CostParcelType = TableEncryptionService.Convert(this.CostParcelType, key);
    _o.CostId = TableEncryptionService.Convert(this.CostId, key);
    _o.CostAmount = TableEncryptionService.Convert(this.CostAmount, key);
  }
  public static Offset<Plana.FlatData.EventContentMeetupInfoExcel> Pack(FlatBufferBuilder builder, EventContentMeetupInfoExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.EventContentMeetupInfoExcel>);
    return CreateEventContentMeetupInfoExcel(
      builder,
      _o.EventContentId,
      _o.CostParcelType,
      _o.CostId,
      _o.CostAmount);
  }
}

public class EventContentMeetupInfoExcelT
{
  public long EventContentId { get; set; }
  public Plana.FlatData.ParcelType CostParcelType { get; set; }
  public long CostId { get; set; }
  public int CostAmount { get; set; }

  public EventContentMeetupInfoExcelT() {
    this.EventContentId = 0;
    this.CostParcelType = Plana.FlatData.ParcelType.None;
    this.CostId = 0;
    this.CostAmount = 0;
  }
}


static public class EventContentMeetupInfoExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*EventContentId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*CostParcelType*/, 4 /*Plana.FlatData.ParcelType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*CostId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*CostAmount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
