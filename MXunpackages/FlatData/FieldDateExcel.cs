// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct FieldDateExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FieldDateExcel GetRootAsFieldDateExcel(ByteBuffer _bb) { return GetRootAsFieldDateExcel(_bb, new FieldDateExcel()); }
  public static FieldDateExcel GetRootAsFieldDateExcel(ByteBuffer _bb, FieldDateExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldDateExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long SeasonId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long UniqueId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenDate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string DateLocalizeKey { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDateLocalizeKeyBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDateLocalizeKeyBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDateLocalizeKeyArray() { return __p.__vector_as_array<byte>(10); }
  public long EntrySceneId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Plana.FlatData.FieldConditionType StartConditionType { get { int o = __p.__offset(14); return o != 0 ? (Plana.FlatData.FieldConditionType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.FieldConditionType.Invalid; } }
  public long StartConditionId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Plana.FlatData.FieldConditionType EndConditionType { get { int o = __p.__offset(18); return o != 0 ? (Plana.FlatData.FieldConditionType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.FieldConditionType.Invalid; } }
  public long EndConditionId { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Plana.FlatData.FieldConditionType EndReadyConditionType { get { int o = __p.__offset(22); return o != 0 ? (Plana.FlatData.FieldConditionType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.FieldConditionType.Invalid; } }
  public long EndReadyConditionId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenConditionStage { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public string CharacterIconPath { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterIconPathBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetCharacterIconPathBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetCharacterIconPathArray() { return __p.__vector_as_array<byte>(28); }
  public string DateResultBGPath { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDateResultBGPathBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetDateResultBGPathBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetDateResultBGPathArray() { return __p.__vector_as_array<byte>(30); }
  public string DateResultSpinePath { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDateResultSpinePathBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetDateResultSpinePathBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetDateResultSpinePathArray() { return __p.__vector_as_array<byte>(32); }
  public float DateResultSpineOffsetX { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Plana.FlatData.FieldDateExcel> CreateFieldDateExcel(FlatBufferBuilder builder,
      long SeasonId = 0,
      long UniqueId = 0,
      long OpenDate = 0,
      StringOffset DateLocalizeKeyOffset = default(StringOffset),
      long EntrySceneId = 0,
      Plana.FlatData.FieldConditionType StartConditionType = Plana.FlatData.FieldConditionType.Invalid,
      long StartConditionId = 0,
      Plana.FlatData.FieldConditionType EndConditionType = Plana.FlatData.FieldConditionType.Invalid,
      long EndConditionId = 0,
      Plana.FlatData.FieldConditionType EndReadyConditionType = Plana.FlatData.FieldConditionType.Invalid,
      long EndReadyConditionId = 0,
      long OpenConditionStage = 0,
      StringOffset CharacterIconPathOffset = default(StringOffset),
      StringOffset DateResultBGPathOffset = default(StringOffset),
      StringOffset DateResultSpinePathOffset = default(StringOffset),
      float DateResultSpineOffsetX = 0.0f) {
    builder.StartTable(16);
    FieldDateExcel.AddOpenConditionStage(builder, OpenConditionStage);
    FieldDateExcel.AddEndReadyConditionId(builder, EndReadyConditionId);
    FieldDateExcel.AddEndConditionId(builder, EndConditionId);
    FieldDateExcel.AddStartConditionId(builder, StartConditionId);
    FieldDateExcel.AddEntrySceneId(builder, EntrySceneId);
    FieldDateExcel.AddOpenDate(builder, OpenDate);
    FieldDateExcel.AddUniqueId(builder, UniqueId);
    FieldDateExcel.AddSeasonId(builder, SeasonId);
    FieldDateExcel.AddDateResultSpineOffsetX(builder, DateResultSpineOffsetX);
    FieldDateExcel.AddDateResultSpinePath(builder, DateResultSpinePathOffset);
    FieldDateExcel.AddDateResultBGPath(builder, DateResultBGPathOffset);
    FieldDateExcel.AddCharacterIconPath(builder, CharacterIconPathOffset);
    FieldDateExcel.AddEndReadyConditionType(builder, EndReadyConditionType);
    FieldDateExcel.AddEndConditionType(builder, EndConditionType);
    FieldDateExcel.AddStartConditionType(builder, StartConditionType);
    FieldDateExcel.AddDateLocalizeKey(builder, DateLocalizeKeyOffset);
    return FieldDateExcel.EndFieldDateExcel(builder);
  }

  public static void StartFieldDateExcel(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddSeasonId(FlatBufferBuilder builder, long seasonId) { builder.AddLong(0, seasonId, 0); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(1, uniqueId, 0); }
  public static void AddOpenDate(FlatBufferBuilder builder, long openDate) { builder.AddLong(2, openDate, 0); }
  public static void AddDateLocalizeKey(FlatBufferBuilder builder, StringOffset dateLocalizeKeyOffset) { builder.AddOffset(3, dateLocalizeKeyOffset.Value, 0); }
  public static void AddEntrySceneId(FlatBufferBuilder builder, long entrySceneId) { builder.AddLong(4, entrySceneId, 0); }
  public static void AddStartConditionType(FlatBufferBuilder builder, Plana.FlatData.FieldConditionType startConditionType) { builder.AddInt(5, (int)startConditionType, 0); }
  public static void AddStartConditionId(FlatBufferBuilder builder, long startConditionId) { builder.AddLong(6, startConditionId, 0); }
  public static void AddEndConditionType(FlatBufferBuilder builder, Plana.FlatData.FieldConditionType endConditionType) { builder.AddInt(7, (int)endConditionType, 0); }
  public static void AddEndConditionId(FlatBufferBuilder builder, long endConditionId) { builder.AddLong(8, endConditionId, 0); }
  public static void AddEndReadyConditionType(FlatBufferBuilder builder, Plana.FlatData.FieldConditionType endReadyConditionType) { builder.AddInt(9, (int)endReadyConditionType, 0); }
  public static void AddEndReadyConditionId(FlatBufferBuilder builder, long endReadyConditionId) { builder.AddLong(10, endReadyConditionId, 0); }
  public static void AddOpenConditionStage(FlatBufferBuilder builder, long openConditionStage) { builder.AddLong(11, openConditionStage, 0); }
  public static void AddCharacterIconPath(FlatBufferBuilder builder, StringOffset characterIconPathOffset) { builder.AddOffset(12, characterIconPathOffset.Value, 0); }
  public static void AddDateResultBGPath(FlatBufferBuilder builder, StringOffset dateResultBGPathOffset) { builder.AddOffset(13, dateResultBGPathOffset.Value, 0); }
  public static void AddDateResultSpinePath(FlatBufferBuilder builder, StringOffset dateResultSpinePathOffset) { builder.AddOffset(14, dateResultSpinePathOffset.Value, 0); }
  public static void AddDateResultSpineOffsetX(FlatBufferBuilder builder, float dateResultSpineOffsetX) { builder.AddFloat(15, dateResultSpineOffsetX, 0.0f); }
  public static Offset<Plana.FlatData.FieldDateExcel> EndFieldDateExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.FieldDateExcel>(o);
  }
  public FieldDateExcelT UnPack() {
    var _o = new FieldDateExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FieldDateExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("FieldDate");
    _o.SeasonId = TableEncryptionService.Convert(this.SeasonId, key);
    _o.UniqueId = TableEncryptionService.Convert(this.UniqueId, key);
    _o.OpenDate = TableEncryptionService.Convert(this.OpenDate, key);
    _o.DateLocalizeKey = TableEncryptionService.Convert(this.DateLocalizeKey, key);
    _o.EntrySceneId = TableEncryptionService.Convert(this.EntrySceneId, key);
    _o.StartConditionType = TableEncryptionService.Convert(this.StartConditionType, key);
    _o.StartConditionId = TableEncryptionService.Convert(this.StartConditionId, key);
    _o.EndConditionType = TableEncryptionService.Convert(this.EndConditionType, key);
    _o.EndConditionId = TableEncryptionService.Convert(this.EndConditionId, key);
    _o.EndReadyConditionType = TableEncryptionService.Convert(this.EndReadyConditionType, key);
    _o.EndReadyConditionId = TableEncryptionService.Convert(this.EndReadyConditionId, key);
    _o.OpenConditionStage = TableEncryptionService.Convert(this.OpenConditionStage, key);
    _o.CharacterIconPath = TableEncryptionService.Convert(this.CharacterIconPath, key);
    _o.DateResultBGPath = TableEncryptionService.Convert(this.DateResultBGPath, key);
    _o.DateResultSpinePath = TableEncryptionService.Convert(this.DateResultSpinePath, key);
    _o.DateResultSpineOffsetX = TableEncryptionService.Convert(this.DateResultSpineOffsetX, key);
  }
  public static Offset<Plana.FlatData.FieldDateExcel> Pack(FlatBufferBuilder builder, FieldDateExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.FieldDateExcel>);
    var _DateLocalizeKey = _o.DateLocalizeKey == null ? default(StringOffset) : builder.CreateString(_o.DateLocalizeKey);
    var _CharacterIconPath = _o.CharacterIconPath == null ? default(StringOffset) : builder.CreateString(_o.CharacterIconPath);
    var _DateResultBGPath = _o.DateResultBGPath == null ? default(StringOffset) : builder.CreateString(_o.DateResultBGPath);
    var _DateResultSpinePath = _o.DateResultSpinePath == null ? default(StringOffset) : builder.CreateString(_o.DateResultSpinePath);
    return CreateFieldDateExcel(
      builder,
      _o.SeasonId,
      _o.UniqueId,
      _o.OpenDate,
      _DateLocalizeKey,
      _o.EntrySceneId,
      _o.StartConditionType,
      _o.StartConditionId,
      _o.EndConditionType,
      _o.EndConditionId,
      _o.EndReadyConditionType,
      _o.EndReadyConditionId,
      _o.OpenConditionStage,
      _CharacterIconPath,
      _DateResultBGPath,
      _DateResultSpinePath,
      _o.DateResultSpineOffsetX);
  }
}

public class FieldDateExcelT
{
  public long SeasonId { get; set; }
  public long UniqueId { get; set; }
  public long OpenDate { get; set; }
  public string DateLocalizeKey { get; set; }
  public long EntrySceneId { get; set; }
  public Plana.FlatData.FieldConditionType StartConditionType { get; set; }
  public long StartConditionId { get; set; }
  public Plana.FlatData.FieldConditionType EndConditionType { get; set; }
  public long EndConditionId { get; set; }
  public Plana.FlatData.FieldConditionType EndReadyConditionType { get; set; }
  public long EndReadyConditionId { get; set; }
  public long OpenConditionStage { get; set; }
  public string CharacterIconPath { get; set; }
  public string DateResultBGPath { get; set; }
  public string DateResultSpinePath { get; set; }
  public float DateResultSpineOffsetX { get; set; }

  public FieldDateExcelT() {
    this.SeasonId = 0;
    this.UniqueId = 0;
    this.OpenDate = 0;
    this.DateLocalizeKey = null;
    this.EntrySceneId = 0;
    this.StartConditionType = Plana.FlatData.FieldConditionType.Invalid;
    this.StartConditionId = 0;
    this.EndConditionType = Plana.FlatData.FieldConditionType.Invalid;
    this.EndConditionId = 0;
    this.EndReadyConditionType = Plana.FlatData.FieldConditionType.Invalid;
    this.EndReadyConditionId = 0;
    this.OpenConditionStage = 0;
    this.CharacterIconPath = null;
    this.DateResultBGPath = null;
    this.DateResultSpinePath = null;
    this.DateResultSpineOffsetX = 0.0f;
  }
}


static public class FieldDateExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*SeasonId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*OpenDate*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 10 /*DateLocalizeKey*/, false)
      && verifier.VerifyField(tablePos, 12 /*EntrySceneId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*StartConditionType*/, 4 /*Plana.FlatData.FieldConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 16 /*StartConditionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 18 /*EndConditionType*/, 4 /*Plana.FlatData.FieldConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 20 /*EndConditionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 22 /*EndReadyConditionType*/, 4 /*Plana.FlatData.FieldConditionType*/, 4, false)
      && verifier.VerifyField(tablePos, 24 /*EndReadyConditionId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 26 /*OpenConditionStage*/, 8 /*long*/, 8, false)
      && verifier.VerifyString(tablePos, 28 /*CharacterIconPath*/, false)
      && verifier.VerifyString(tablePos, 30 /*DateResultBGPath*/, false)
      && verifier.VerifyString(tablePos, 32 /*DateResultSpinePath*/, false)
      && verifier.VerifyField(tablePos, 34 /*DateResultSpineOffsetX*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
