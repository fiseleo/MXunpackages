// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct ContentsFeverExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ContentsFeverExcel GetRootAsContentsFeverExcel(ByteBuffer _bb) { return GetRootAsContentsFeverExcel(_bb, new ContentsFeverExcel()); }
  public static ContentsFeverExcel GetRootAsContentsFeverExcel(ByteBuffer _bb, ContentsFeverExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentsFeverExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Plana.FlatData.FeverBattleType ConditionContent { get { int o = __p.__offset(4); return o != 0 ? (Plana.FlatData.FeverBattleType)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.FeverBattleType.Campaign; } }
  public Plana.FlatData.SkillPriorityCheckTarget SkillFeverCheckCondition { get { int o = __p.__offset(6); return o != 0 ? (Plana.FlatData.SkillPriorityCheckTarget)__p.bb.GetInt(o + __p.bb_pos) : Plana.FlatData.SkillPriorityCheckTarget.Ally; } }
  public long SkillCostFever { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FeverStartTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long FeverDurationTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Plana.FlatData.ContentsFeverExcel> CreateContentsFeverExcel(FlatBufferBuilder builder,
      Plana.FlatData.FeverBattleType ConditionContent = Plana.FlatData.FeverBattleType.Campaign,
      Plana.FlatData.SkillPriorityCheckTarget SkillFeverCheckCondition = Plana.FlatData.SkillPriorityCheckTarget.Ally,
      long SkillCostFever = 0,
      long FeverStartTime = 0,
      long FeverDurationTime = 0) {
    builder.StartTable(5);
    ContentsFeverExcel.AddFeverDurationTime(builder, FeverDurationTime);
    ContentsFeverExcel.AddFeverStartTime(builder, FeverStartTime);
    ContentsFeverExcel.AddSkillCostFever(builder, SkillCostFever);
    ContentsFeverExcel.AddSkillFeverCheckCondition(builder, SkillFeverCheckCondition);
    ContentsFeverExcel.AddConditionContent(builder, ConditionContent);
    return ContentsFeverExcel.EndContentsFeverExcel(builder);
  }

  public static void StartContentsFeverExcel(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddConditionContent(FlatBufferBuilder builder, Plana.FlatData.FeverBattleType conditionContent) { builder.AddInt(0, (int)conditionContent, 0); }
  public static void AddSkillFeverCheckCondition(FlatBufferBuilder builder, Plana.FlatData.SkillPriorityCheckTarget skillFeverCheckCondition) { builder.AddInt(1, (int)skillFeverCheckCondition, 0); }
  public static void AddSkillCostFever(FlatBufferBuilder builder, long skillCostFever) { builder.AddLong(2, skillCostFever, 0); }
  public static void AddFeverStartTime(FlatBufferBuilder builder, long feverStartTime) { builder.AddLong(3, feverStartTime, 0); }
  public static void AddFeverDurationTime(FlatBufferBuilder builder, long feverDurationTime) { builder.AddLong(4, feverDurationTime, 0); }
  public static Offset<Plana.FlatData.ContentsFeverExcel> EndContentsFeverExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.ContentsFeverExcel>(o);
  }
  public ContentsFeverExcelT UnPack() {
    var _o = new ContentsFeverExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentsFeverExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("ContentsFever");
    _o.ConditionContent = TableEncryptionService.Convert(this.ConditionContent, key);
    _o.SkillFeverCheckCondition = TableEncryptionService.Convert(this.SkillFeverCheckCondition, key);
    _o.SkillCostFever = TableEncryptionService.Convert(this.SkillCostFever, key);
    _o.FeverStartTime = TableEncryptionService.Convert(this.FeverStartTime, key);
    _o.FeverDurationTime = TableEncryptionService.Convert(this.FeverDurationTime, key);
  }
  public static Offset<Plana.FlatData.ContentsFeverExcel> Pack(FlatBufferBuilder builder, ContentsFeverExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.ContentsFeverExcel>);
    return CreateContentsFeverExcel(
      builder,
      _o.ConditionContent,
      _o.SkillFeverCheckCondition,
      _o.SkillCostFever,
      _o.FeverStartTime,
      _o.FeverDurationTime);
  }
}

public class ContentsFeverExcelT
{
  public Plana.FlatData.FeverBattleType ConditionContent { get; set; }
  public Plana.FlatData.SkillPriorityCheckTarget SkillFeverCheckCondition { get; set; }
  public long SkillCostFever { get; set; }
  public long FeverStartTime { get; set; }
  public long FeverDurationTime { get; set; }

  public ContentsFeverExcelT() {
    this.ConditionContent = Plana.FlatData.FeverBattleType.Campaign;
    this.SkillFeverCheckCondition = Plana.FlatData.SkillPriorityCheckTarget.Ally;
    this.SkillCostFever = 0;
    this.FeverStartTime = 0;
    this.FeverDurationTime = 0;
  }
}


static public class ContentsFeverExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ConditionContent*/, 4 /*Plana.FlatData.FeverBattleType*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*SkillFeverCheckCondition*/, 4 /*Plana.FlatData.SkillPriorityCheckTarget*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SkillCostFever*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*FeverStartTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 12 /*FeverDurationTime*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
