// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Plana.FlatData
{

using global::System;
using global::System.Collections.Generic;
using global::Plana.Crypto;
using global::Google.FlatBuffers;

public struct FieldCurtainCallFreeModeExcel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static FieldCurtainCallFreeModeExcel GetRootAsFieldCurtainCallFreeModeExcel(ByteBuffer _bb) { return GetRootAsFieldCurtainCallFreeModeExcel(_bb, new FieldCurtainCallFreeModeExcel()); }
  public static FieldCurtainCallFreeModeExcel GetRootAsFieldCurtainCallFreeModeExcel(ByteBuffer _bb, FieldCurtainCallFreeModeExcel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FieldCurtainCallFreeModeExcel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long UniqueId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long OpenDate { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SetFieldDateID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long SetFieldQuestOpenDate { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Plana.FlatData.FieldCurtainCallFreeModeExcel> CreateFieldCurtainCallFreeModeExcel(FlatBufferBuilder builder,
      long UniqueId = 0,
      long OpenDate = 0,
      long SetFieldDateID = 0,
      long SetFieldQuestOpenDate = 0) {
    builder.StartTable(4);
    FieldCurtainCallFreeModeExcel.AddSetFieldQuestOpenDate(builder, SetFieldQuestOpenDate);
    FieldCurtainCallFreeModeExcel.AddSetFieldDateID(builder, SetFieldDateID);
    FieldCurtainCallFreeModeExcel.AddOpenDate(builder, OpenDate);
    FieldCurtainCallFreeModeExcel.AddUniqueId(builder, UniqueId);
    return FieldCurtainCallFreeModeExcel.EndFieldCurtainCallFreeModeExcel(builder);
  }

  public static void StartFieldCurtainCallFreeModeExcel(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddUniqueId(FlatBufferBuilder builder, long uniqueId) { builder.AddLong(0, uniqueId, 0); }
  public static void AddOpenDate(FlatBufferBuilder builder, long openDate) { builder.AddLong(1, openDate, 0); }
  public static void AddSetFieldDateID(FlatBufferBuilder builder, long setFieldDateID) { builder.AddLong(2, setFieldDateID, 0); }
  public static void AddSetFieldQuestOpenDate(FlatBufferBuilder builder, long setFieldQuestOpenDate) { builder.AddLong(3, setFieldQuestOpenDate, 0); }
  public static Offset<Plana.FlatData.FieldCurtainCallFreeModeExcel> EndFieldCurtainCallFreeModeExcel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Plana.FlatData.FieldCurtainCallFreeModeExcel>(o);
  }
  public FieldCurtainCallFreeModeExcelT UnPack() {
    var _o = new FieldCurtainCallFreeModeExcelT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FieldCurtainCallFreeModeExcelT _o) {
		byte[] key = TableEncryptionService.CreateKey("FieldCurtainCallFreeMode");
    _o.UniqueId = TableEncryptionService.Convert(this.UniqueId, key);
    _o.OpenDate = TableEncryptionService.Convert(this.OpenDate, key);
    _o.SetFieldDateID = TableEncryptionService.Convert(this.SetFieldDateID, key);
    _o.SetFieldQuestOpenDate = TableEncryptionService.Convert(this.SetFieldQuestOpenDate, key);
  }
  public static Offset<Plana.FlatData.FieldCurtainCallFreeModeExcel> Pack(FlatBufferBuilder builder, FieldCurtainCallFreeModeExcelT _o) {
    if (_o == null) return default(Offset<Plana.FlatData.FieldCurtainCallFreeModeExcel>);
    return CreateFieldCurtainCallFreeModeExcel(
      builder,
      _o.UniqueId,
      _o.OpenDate,
      _o.SetFieldDateID,
      _o.SetFieldQuestOpenDate);
  }
}

public class FieldCurtainCallFreeModeExcelT
{
  public long UniqueId { get; set; }
  public long OpenDate { get; set; }
  public long SetFieldDateID { get; set; }
  public long SetFieldQuestOpenDate { get; set; }

  public FieldCurtainCallFreeModeExcelT() {
    this.UniqueId = 0;
    this.OpenDate = 0;
    this.SetFieldDateID = 0;
    this.SetFieldQuestOpenDate = 0;
  }
}


static public class FieldCurtainCallFreeModeExcelVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UniqueId*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*OpenDate*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 8 /*SetFieldDateID*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 10 /*SetFieldQuestOpenDate*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
